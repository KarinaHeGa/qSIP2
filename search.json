[{"path":"https://jeffkimbrel.github.io/qSIP2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 qSIP2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/controlled_vocab.html","id":"source-data","dir":"Articles","previous_headings":"","what":"Source Data","title":"qSIP Definitions and Terminology","text":"source_mat_id also used link sample metadata source metadata term derived MISIP1 standards qSIP2, choices limited one 12C, 13C, 14N, 15N, 16O 18O ’re sample unfractionated, can also use “bulk”, “unfractionated” “T0” term also required MISIP field term also required MISIP field qSIP2 doesn’t strictly adhere MISIP standards, string “glucose” suffice timepoint: timepoint experiment. unit doesn’t matter, consistent across dataset. Designating timepoint required growth calculations total_abundance: total copy number unfractionated source material. required growth calculations volume: volume DNA total_abundance measured . Can just set 1 samples volume. required growth calculations.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/controlled_vocab.html","id":"sample-data","dir":"Articles","previous_headings":"","what":"Sample Data","title":"qSIP Definitions and Terminology","text":"term also used link sample metadata source metadata gradient_position: numerical position sample gradient. Informally refered “fraction”. gradient_pos_density: density gradient position gradient_pos_amt: total mass, concentration copy numbers position gradient_pos_rel_amt: relative amount gradient_pos_amt compared total amount source material","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/controlled_vocab.html","id":"feature-data","dir":"Articles","previous_headings":"","what":"Feature Data","title":"qSIP Definitions and Terminology","text":"feature_id: unique ID feature feature type: Explains values feature table represent. example “counts”, “relative”, etc.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"feature-counts-and-metadata","dir":"Articles","previous_headings":"","what":"Feature Counts and Metadata","title":"Feature Data","text":"feature table required file qSIP2 pipeline. typical ASV/OTU table individual taxa rows, sample names columns. table populated raw sequencing counts amplicon workflow, proxy abundance (like mean/median depth coverage) working MAGs, contigs data types. “feature” refers names individual sequenced units (amplicons, taxa, vOTUs, MAGs, etc.) feature data dataframe column designated feature_id. dataframe rownames can convert column using tibble::rownames_to_column() function. row corresponds feature_id, abundance feature certain sample lives column sample_id column header. abundance values can one several types, values subject different validation requirements based type data. Currently, accepted types counts, coverage, normalized, relative. counts default used cases giving raw sequencing counts. , data expected integers equal greater 0. coverage designed use MAGs data types using proxy abundance like mean/median depth coverage. , data expected numeric values equal greater 0. relative situations might lost original integer count data relative abundance. using option expects fractional abundances (rather percentages) column must sum 1 less. normalized special case already pre-normalized counts using internal spike-similar.","code":"df_with_rownames <- data.frame(   row.names = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(1, 2, 3),   sample2 = c(4, 5, 6) )  # data has rownames rownames(df_with_rownames) #> [1] \"feature1\" \"feature2\" \"feature3\" df_with_rownames #>          sample1 sample2 #> feature1       1       4 #> feature2       2       5 #> feature3       3       6  # convert rownames to their own column df_with_rownames |>   tibble::rownames_to_column(var = \"feature_id\") #>   feature_id sample1 sample2 #> 1   feature1       1       4 #> 2   feature2       2       5 #> 3   feature3       3       6"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"qsip2-feature-data-object","dir":"Articles","previous_headings":"","what":"qSIP2 Feature Data Object","title":"Feature Data","text":"qsip_feature_data() function creates qsip_feature_data object. qSIP_feature_data object holds validated abundance data features. can made giving already made dataframe, modifying dataframe piping directly function. example dataframe qSIP2 package called example_feature_data.","code":"feature_data = qsip_feature_data(example_feature_df,                                   feature_id = \"ASV\",                                  type = \"counts\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"structure-of-qsip_feature_data","dir":"Articles","previous_headings":"qSIP2 Feature Data Object","what":"Structure of qsip_feature_data","title":"Feature Data","text":"Like qSIP2 objects, qsip_feature_data object contains @data slot hold feature table, isn’t intended worked directly. @type slot holds type data, @feature_id slot holds name column feature ids. additional slot taxonomy data, (see ). can return original dataframe get_dataframe() method.","code":"# not run get_dataframe(feature_data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"validation-of-qsip_feature_data","dir":"Articles","previous_headings":"qSIP2 Feature Data Object","what":"Validation of qsip_feature_data","title":"Feature Data","text":"validation checks depend chosen type. try pass values don’t match type specified, get error. example, fractional values allowed type default counts. allowed type = \"coverage\". theory, slots can overwritten, recommended. , undergo validations may fail.","code":"tibble(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(0.1, 0.2, 0.3),   sample2 = c(0.4, 0.5, 0.6) ) |>   qsip_feature_data() #> Error: Some data are not integers tibble(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(0.1, 0.2, 0.3),   sample2 = c(0.4, 0.5, 0.6) ) |>   qsip_feature_data(type = \"coverage\") #> <qsip_feature_data> #>  @ data      : tibble [3 × 3] (S3: tbl_df/tbl/data.frame) #>  $ feature_id: chr [1:3] \"feature1\" \"feature2\" \"feature3\" #>  $ sample1   : num [1:3] 0.1 0.2 0.3 #>  $ sample2   : num [1:3] 0.4 0.5 0.6 #>  @ feature_id: chr \"feature_id\" #>  @ taxonomy  :'data.frame':  0 obs. of  0 variables #>  @ type      : chr \"coverage\" feature_data@type <- \"relative\" #> Error: Some columns have a total relative abundance sum greater than 1"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"na-values","dir":"Articles","previous_headings":"Special Considerations","what":"NA Values","title":"Feature Data","text":"NA values abundance table, get error trying make feature object. cases value NA means abundance 0, best practice convert prior creating object mutate call across function tidyr package.","code":"tibble(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(1, 2, NA),   sample2 = c(4, 5, 6) ) |>   mutate(across(everything(), ~ replace_na(.x, 0))) |>   qsip_feature_data() #> <qsip_feature_data> #>  @ data      : tibble [3 × 3] (S3: tbl_df/tbl/data.frame) #>  $ feature_id: chr [1:3] \"feature1\" \"feature2\" \"feature3\" #>  $ sample1   : num [1:3] 1 2 0 #>  $ sample2   : num [1:3] 4 5 6 #>  @ feature_id: chr \"feature_id\" #>  @ taxonomy  :'data.frame':  0 obs. of  0 variables #>  @ type      : chr \"counts\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"taxonomy-or-other-metadata","dir":"Articles","previous_headings":"Special Considerations","what":"Taxonomy or other metadata","title":"Feature Data","text":"metadata features, taxonomy table, can add add_taxonomy() function live @taxonomy slot.","code":"taxonomy <- tibble(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   genus = c(\"Marinobacter\", \"Devosia\", \"Pseudomonas\"),   species = c(\"adhaerens\", \"insulae\", \"syringae\") )  tibble(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(1, 2, 3),   sample2 = c(4, 5, 6) ) |>   qsip_feature_data() |>   add_taxonomy(taxonomy, feature_id = \"feature_id\") #> <qsip_feature_data> #>  @ data      : tibble [3 × 3] (S3: tbl_df/tbl/data.frame) #>  $ feature_id: chr [1:3] \"feature1\" \"feature2\" \"feature3\" #>  $ sample1   : num [1:3] 1 2 3 #>  $ sample2   : num [1:3] 4 5 6 #>  @ feature_id: chr \"feature_id\" #>  @ taxonomy  : tibble [3 × 3] (S3: tbl_df/tbl/data.frame) #>  $ feature_id: chr [1:3] \"feature1\" \"feature2\" \"feature3\" #>  $ genus     : chr [1:3] \"Marinobacter\" \"Devosia\" \"Pseudomonas\" #>  $ species   : chr [1:3] \"adhaerens\" \"insulae\" \"syringae\" #>  @ type      : chr \"counts\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Growth Workflow","text":"Using qSIP2, can estimate growth rate individual features (.e. bacteria) microbial community fitting growth model abundance labeled taxon time. Assumptions growth include isotopic labeling time zero pool unlabeled features go time bacteria incorporate isotope 100% labeled Using calculated EAF values standard workflow, therefore can say EAF 0.5 means 50% bacteria labeled result growth since time zero (.e. “birth” bb). , using quantitative abundance values time zero time point samples, can estimate death rate (dd) individual features calculating decrease unlabeled features. Together, get growth rate using equation ri=bi+dir_i = b_i + d_i feature ii1. one main advantages qSIP bb equals dd traditional community analysis detect change community, whereas qSIP detect growth death individual features. Growth analysis starts calculations EAF values, therefore requires standard workflow (vignette(\"qSIP_workflow\")) run first slight modifications. growth, three additional arguments required qsip_source_data creation. timepoint - numerical value timepoint source material. often 0 timepoint, can values growth rate calculated difference time points. , can units (e.g. days, hours, etc.), interpretation growth rate depend units (e.g. “per day” “per hour”). total_abundance - numerical value total abundance source material. Ideally, copy number qPCR using primers sequencing. , standardized unit starting material (e.g. copies per gram soil). isn’t, next volume argument important. volume - numerical value volume source material DNA copy number derived . Typically volume source material DNA extractions, starting volume qPCR different parameter important.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"growth-object","dir":"Articles","previous_headings":"","what":"Growth Object","title":"Growth Workflow","text":"example growth object provided qSIP2 package called example_qsip_growth_object. can check columns contain three additional arguments growth, pull table relevant columns. table, can notice things. First, 15 total samples - 5 timepoint 0, 5 16O 18O isotopes. Second, sources standard isotope designation, instead say “Time0”. special allowed isotope type flagging sources unfractionated, therefor EAF value calculated . Third, volume column samples indicates total_abundance already standardized volume. Indeed look column total_abundance derived can tell name copy number standardize amount soil (16S copies per gram soil).","code":"get_dataframe(example_qsip_growth_object, type = \"source\") |>    select(source_mat_id, isotope, timepoint, total_abundance, volume) |>   arrange(timepoint, isotope) example_qsip_growth_object@source_data@total_abundance #> [1] \"qPCR.16S.copies.g.soil\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"eaf-workflow","dir":"Articles","previous_headings":"","what":"EAF Workflow","title":"Growth Workflow","text":"mentioned , growth workflow requires EAF values calculated first. Note, running allow_failures = TRUE, still minimum 4 labeled 4 unlabeled fractions. Overall, features robust resampling results, less 99% success labeled sources.","code":"q <- run_feature_filter(example_qsip_growth_object,   group = \"Day 10\",   unlabeled_source_mat_ids = c(\"source_11\", \"source_14\", \"source_2\", \"source_5\", \"source_8\"),   labeled_source_mat_ids = c(\"source_12\", \"source_15\", \"source_3\", \"source_6\", \"source_9\"),   min_labeled_fractions = 4,   min_unlabeled_fractions = 4 ) |>   run_resampling(     resamples = 1000,     with_seed = 1332,     allow_failures = TRUE,     progress = FALSE   ) |>   run_EAF_calculations() #> There are initially 364 unique feature_ids #> 364 of these have abundance in at least one fraction of one source_mat_id #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by fraction... #> 15 unlabeled and 11 labeled feature_ids were found in zero fractions in at least one source_mat_id #> 70 unlabeled and 47 labeled feature_ids were found in too few fractions in at least one source_mat_id #> 364 unlabeled and 364 labeled feature_ids passed the fraction filter #> In total, 364 unique feature_ids passed the fraction filtering requirements... #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by source... #> 6 unlabeled and 5 labeled feature_ids failed the source filter because they were found in too few sources #> 358 unlabeled and 359 labeled feature_ids passed the source filter #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> In total, 358 unique feature_ids passed all fraction and source filtering requirements #> Warning: NA unlabeled and NA labeled feature_ids had resampling failures. Run #> `get_resample_counts()` or `plot_successful_resamples()` on your <qsip_data> #> object to inspect. get_resample_counts(q) |>   filter(labeled_resamples < 1000 | unlabeled_resamples < 1000) #> # A tibble: 8 × 3 #>   feature_id labeled_resamples unlabeled_resamples #>   <chr>                  <int>               <int> #> 1 taxon_113               1000                 999 #> 2 taxon_180               1000                 999 #> 3 taxon_234                996                 990 #> 4 taxon_250                993                 990 #> 5 taxon_278               1000                 999 #> 6 taxon_292               1000                 999 #> 7 taxon_327               1000                 999 #> 8 taxon_341               1000                 999 plot_EAF_values(q,   confidence = 0.9,   error = \"ribbon\",   success_ratio = 0.9 ) #> Confidence level = 0.9"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"time-zero-total-abundances","dir":"Articles","previous_headings":"Growth Workflow","what":"Time zero total abundances","title":"Growth Workflow","text":"addition EAF values stored qsip_data object, also need table NTOTALi0N_{TOTALi0} values feature ii timepoint tt, case time 0. value total abundance feature sum labeled unlabeled features (equation 2 Koch, 20182). Note don’t always compare time zero. 7-day 14-day timepoint can set day 7 initial timepoint . table created get_N_total_it() function pass original qsip_data object timepoint interest. get_N_total_it() run initial qsip_data object filtering resampling done. unfractionated time zero sources present filtered data. Note get warning taxon_194 zero abundance t = 0. Therefore, feature growth rate calculated change abundance considered infinite growth. First rows N_total_i0","code":"N_total_i0 <- get_N_total_it(example_qsip_growth_object, t = 0) #> Warning: 1 feature_ids have zero abundance at time 0: #> Warning: taxon_194"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"growth-rate-calculations","dir":"Articles","previous_headings":"Growth Workflow","what":"Growth rate calculations","title":"Growth Workflow","text":"Using abundance values stored N_total_i0 resampled EAF values stored q, can calculate growth rate feature. done run_growth_calculations() function pass qsip_data object, N_total_i0 table, growth model use. growth model can either “exponential” “linear”. Note warning message, return minute.","code":"q <- run_growth_calculations(q,                                N_total_it = example_qsip_growth_t0,                                growth_model = \"exponential\") #> Warning: 31862 resamplings have a negative EAF value or calculated labeled copy #> numbers less than 0. These values have been filtered out and added to #> @growth$negative_labeled"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"growth-calculation-results","dir":"Articles","previous_headings":"Growth Workflow","what":"Growth calculation results","title":"Growth Workflow","text":"can get dataframe growth calculations get_growth_data() function. , also filter just data first resample. first rows get_growth_data(q) columns contain important, redundant information. example, feature timepoint1, timepoint2, N_total_i0, N_total_it, r_net ri rows. timepoint1 timepoint2 timepoints growth calculations. dataset, comparing day 10 day 0, rates units “per day”. N_total_i0 total abundance feature time 0, N_total_it total abundance feature time tt. r_net just copy number difference two time points feature, NTOTALit−NTOTALi0N_{TOTALit} - N_{TOTALi0}. ri overall growth rate, negative value indicates death birth remaining columns use resampled EAF data determine portion N_total_it copies correspond taking substrate remain unlabeled. N_light_it comes equation 3 Koch, 20183, proportion N_total_it isn’t labeled. N_heavy_it proportion N_total_it labeled, roughly NTOTALit*EAFN_{TOTALit} * EAF bi per-unit--time birth rate, di death rate","code":"get_growth_data(q) |>   filter(resample == 1)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"summarizing-growth-data","dir":"Articles","previous_headings":"Growth Workflow","what":"Summarizing Growth Data","title":"Growth Workflow","text":"can summarize growth data specified confidence summarize_growth_values() function. function calculate mean, sd confidence intervals birth death rates, well EAF.","code":"summarize_growth_values(q, confidence = 0.9) |> arrange(feature_id) #> Confidence level = 0.9 #> # A tibble: 351 × 28 #>    feature_id timepoint1 timepoint2  N_total_i0 N_total_it     r_net observed_bi #>    <chr>           <dbl>      <dbl>       <dbl>      <dbl>     <dbl>       <dbl> #>  1 taxon_1             0         10 1595472105. 148586025.   -1.45e9     0.0109  #>  2 taxon_10            0         10    2793486.   1058203.   -1.74e6     0.0250  #>  3 taxon_100           0         10    4698016.   1933443.   -2.76e6     0.0476  #>  4 taxon_101           0         10    4359459.   1617996.   -2.74e6     0.0642  #>  5 taxon_102           0         10   45813796.   6260993.   -3.96e7     0.00402 #>  6 taxon_103           0         10    4639329.    635123.   -4.00e6     0.00392 #>  7 taxon_104           0         10   35390036.   6306709.   -2.91e7     0.00618 #>  8 taxon_105           0         10  381417581.  64847518.   -3.17e8     0.00584 #>  9 taxon_106           0         10    8761701.   1541086.   -7.22e6     0.00477 #> 10 taxon_107           0         10    3724648.    338098.   -3.39e6     0.00231 #> # ℹ 341 more rows #> # ℹ 21 more variables: observed_di <dbl>, observed_ri <dbl>, successes <int>, #> #   resampled_N_mean <dbl>, resampled_rnet_mean <dbl>, resampled_bi_mean <dbl>, #> #   resampled_bi_sd <dbl>, resampled_bi_lower <dbl>, resampled_bi_upper <dbl>, #> #   resampled_di_mean <dbl>, resampled_di_sd <dbl>, resampled_di_lower <dbl>, #> #   resampled_di_upper <dbl>, resampled_ri_mean <dbl>, resampled_ri_sd <dbl>, #> #   resampled_ri_lower <dbl>, resampled_ri_upper <dbl>, …"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"growth-rate-plots","dir":"Articles","previous_headings":"Growth Workflow","what":"Growth rate plots","title":"Growth Workflow","text":"","code":"plot_growth_values(q,                    confidence = 0.9,                    top = 100,                    alpha = 0.4,                    error = \"ribbon\"                    ) #> Confidence level = 0.9"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"when-growth-cannot-be-calculated","dir":"Articles","previous_headings":"Growth Workflow","what":"When growth cannot be calculated","title":"Growth Workflow","text":"cases growth calculated results can non-sensical. cases result entire feature unusable, cases just remove specific resamples feature using remaining features possible.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"no-time-zero-data","dir":"Articles","previous_headings":"Growth Workflow > When growth cannot be calculated","what":"No time zero data","title":"Growth Workflow","text":"noted , taxon_194 zero abundance time zero. Therefore, growth rate calculated change abundance considered infinite growth. intermediate values features can found get_growth_data() function, feature omitted entirely summarize_growth_values() data.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/growth.html","id":"negative-eaf-values","dir":"Articles","previous_headings":"Growth Workflow > When growth cannot be calculated","what":"Negative EAF values","title":"Growth Workflow","text":"related warning received stating 31862 resamplings “negative EAF values”. negative EAF values can common due noise, doesn’t make sense calculating NLIGHTitN_{LIGHTit} NHEAVYitN_{HEAVYit} values. happens NLIGHTitN_{LIGHTit} gets calculated actually copies NTOTALitN_{TOTALit}, impossible, therefore NHEAVYitN_{HEAVYit} negative number copies, also impossible. q@growth$negative_labeled dataframe taxon_1 explaining reasoning. Z (equation 4 Hungate, 20154) difference labeled unlabeled WAD value, Z negative, indicates WAD values lower labeled fractions, likely due noise SIP process. First rows taxon_1 taxon_1 total 28 resamplings fall category, remaining 972 successful. number reflected successes column summarize_growth_values().","code":"q@growth$negative_labeled |>    filter(feature_id == \"taxon_1\") |>   select(feature_id, N_total_it, resample, Z, EAF, N_light_it, N_heavy_it) summarize_growth_values(q, confidence = 0.9) |>    filter(feature_id == \"taxon_1\") |>   select(feature_id, successes) #> Confidence level = 0.9 #> # A tibble: 1 × 2 #>   feature_id successes #>   <chr>          <int> #> 1 taxon_1          972"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/multiple_objects.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Multiple qSIP Objects","text":"qSIP2, can run standard EAF workflow multiple qsip_data objects time. vignette show different ways create use multiple qsip_data objects workflow.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/multiple_objects.html","id":"multiple-object-structure","dir":"Articles","previous_headings":"","what":"Multiple Object Structure","title":"Multiple qSIP Objects","text":"format storing multiple qsip_data objects simple named list, names descriptive succinct name comparison, value qsip_data object. list can created different ways, including “hand”, formatting show_comparison_groups() output, providing dataframe dedicated run_comparison_groups() function. detailed .","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/multiple_objects.html","id":"building-the-multi-qsip_data-object-by-hand","dir":"Articles","previous_headings":"","what":"Building the multi qsip_data object “by hand”","title":"Multiple qSIP Objects","text":"standard vignette(\"qSIP_workflow\") vignette filtered example object create “normal” “drought” objects, proceeded workflow two objects independently. However, two objects can instead combined using list() work simultaneously. can run validation function return TRUE list correct. list objects now holds qsip_data objects, can accessed name (e.g. qsip_list_1$Normal) needed. building hand, main benefit combining multiple objects together get shared reporting summary functions like summarize_EAF_values() plot_EAF_values(). First rows summarize_EAF_values() table , can see feature_id column repeated group.  helper functions can used list well.","code":"qsip_normal <- run_feature_filter(example_qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(example_qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S178\", \"S179\", \"S180\"),   min_unlabeled_sources = 6, min_labeled_sources = 3,   min_unlabeled_fractions = 5, min_labeled_fractions = 5,   quiet = TRUE ) |>   run_resampling(with_seed = 49, quiet = TRUE, progress = FALSE) |>   run_EAF_calculations()  qsip_drought <- run_feature_filter(example_qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(example_qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S200\", \"S201\", \"S202\", \"S203\"),   min_unlabeled_sources = 6, min_labeled_sources = 3,   min_unlabeled_fractions = 5, min_labeled_fractions = 5,   quiet = TRUE ) |>   run_resampling(with_seed = 50, quiet = TRUE, progress = FALSE) |>   run_EAF_calculations()  qsip_list_1 = list(\"Normal\" = qsip_normal,                            \"Drought\" = qsip_drought)  is_qsip_data_list(qsip_list_1) #> [1] TRUE summarize_EAF_values(qsip_list_1) #> Confidence level = 0.9 plot_EAF_values(qsip_list_1,                 top = 50,                 error = \"ribbon\") #> Confidence level = 0.9 n_resamples(qsip_list_1) #> # A tibble: 2 × 2 #>   group   n_resamples #>   <chr>         <dbl> #> 1 Normal         1000 #> 2 Drought        1000 resample_seed(qsip_list_1) #> # A tibble: 2 × 2 #>   group    seed #>   <chr>   <dbl> #> 1 Normal     49 #> 2 Drought    50"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/multiple_objects.html","id":"dataframe-based-multi-qsip_data-object","dir":"Articles","previous_headings":"","what":"Dataframe-based multi qsip_data object","title":"Multiple qSIP Objects","text":"Although building list hand can useful organizing output, functionality list structure really shines start dataframe comparisons want make. workflow steps initial, unfiltered qsip_data objects without need manually build comparison object.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/multiple_objects.html","id":"dataframe-structure","dir":"Articles","previous_headings":"Dataframe-based multi qsip_data object","what":"Dataframe Structure","title":"Multiple qSIP Objects","text":"dataframe simple structure, requires minimum three columns. group column name comparison group, unlabeled labeled columns vectors source_material_ids use comparison. row dataframe separate comparison group.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/multiple_objects.html","id":"modifying-show_comparison_groups-output","dir":"Articles","previous_headings":"Dataframe-based multi qsip_data object","what":"Modifying show_comparison_groups() output","title":"Multiple qSIP Objects","text":"Recall show_comparison_groups() attempts guess relevant comparison groups using metadata. example qsip object, grouping “Moisture” get output already desired format, needed slight tweaking column names using dplyr::select() (dplyr::rename()). dataframe can passed directly run_comparison_groups() create multi qsip_data object. run_comparison_groups() requires dataframe qsip_data object first two arguments. three additional optional arguments globally apply comparisons: allow_failures (boolean), seed (integer), resamples (integer). Plotting values give almost identical results (within sampling error) previous plot, time enabled allow_failures option get resampling success well.","code":"show_comparison_groups(example_qsip_object, group = \"Moisture\") #> # A tibble: 2 × 3 #>   Moisture `12C`                  `13C`                  #>   <chr>    <chr>                  <chr>                  #> 1 Normal   S149, S150, S151, S152 S178, S179, S180       #> 2 Drought  S161, S162, S163, S164 S200, S201, S202, S203 show_comparison_groups(example_qsip_object, group = \"Moisture\") |>    dplyr::select(\"group\" = Moisture, \"unlabeled\" = \"12C\", \"labeled\" = \"13C\") #> # A tibble: 2 × 3 #>   group   unlabeled              labeled                #>   <chr>   <chr>                  <chr>                  #> 1 Normal  S149, S150, S151, S152 S178, S179, S180       #> 2 Drought S161, S162, S163, S164 S200, S201, S202, S203 qsip_list_2 = show_comparison_groups(example_qsip_object, group = \"Moisture\") |>    dplyr::select(\"group\" = Moisture, \"unlabeled\" = \"12C\", \"labeled\" = \"13C\") |>   run_comparison_groups(example_qsip_object,                          seed = 99,                         allow_failures = TRUE) #> Finished groups ■■■■■■■■■■■■■■■■                  50% #> Finished groups ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% #>   is_qsip_data_list(qsip_list_2) #> [1] TRUE plot_EAF_values(qsip_list_2,                 top = 50,                 success_ratio = 0.99,                 error = \"ribbon\") #> Confidence level = 0.9"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/multiple_objects.html","id":"custom-dataframe-for-ultimate-control","dir":"Articles","previous_headings":"Dataframe-based multi qsip_data object","what":"Custom dataframe for ultimate control","title":"Multiple qSIP Objects","text":"possible make dataframe scratch (e.g. excel spreadsheet) give even fine-grain control comparison. , rather setting parameters treated identical comparisons (like seed = 99 ), additional columns can used set values independently per row. example dataframe included qSIP2 package called example_group_dataframe. dataframe shown , columns temporarily removed brevity (columns discussed later). Example dataframe columns removed dataframe shows customizability format, including retaining ability use isotope terms like “12C” grab source material IDs isotope. use additional arguments run_comparison_groups() override values dataframe. 4 additional dataframe columns run_comparison_groups() accept: min_unlabeled_sources, min_labeled_sources, min_unlabeled_fractions, min_labeled_fractions. columns used set minimum number sources fractions required comparison. full example dataframe additionally contain columns. , keep mind row dataframe filtered differently, therefore feature_ids missing certain comparisons. example, ASV_311 appears two “Drought” comparisons. although can plot together, objects might make plots harder read. , simple list can always still access individual objects needed using $ operator (e.g. qsip_list_3$Drought) [] brackets (e.g. qsip_list_3[c(\"Drought\", \"Normal\")]).","code":"example_group_dataframe qsip_list_3 = example_group_dataframe |>   run_comparison_groups(example_qsip_object) #> Finished groups ■■■■■■                            17% #> Finished groups ■■■■■■■■■■■                       33% #> Finished groups ■■■■■■■■■■■■■■■■                  50% #> Finished groups ■■■■■■■■■■■■■■■■■■■■■             67% #> Finished groups ■■■■■■■■■■■■■■■■■■■■■■■■■■        83% #> Finished groups ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% #>   resample_seed(qsip_list_3) #> # A tibble: 6 × 2 #>   group                seed #>   <chr>               <dbl> #> 1 Drought               101 #> 2 Drought against all   102 #> 3 Normal                100 #> 4 Normal_S178           103 #> 5 Normal_S179           104 #> 6 Normal_S180           105 qsip_list_4 = example_group_dataframe |>   run_comparison_groups(example_qsip_object,                         seed = 42) #> Finished groups ■■■■■■                            17% #> Finished groups ■■■■■■■■■■■                       33% #> Finished groups ■■■■■■■■■■■■■■■■                  50% #> Finished groups ■■■■■■■■■■■■■■■■■■■■■             67% #> Finished groups ■■■■■■■■■■■■■■■■■■■■■■■■■■        83% #> Finished groups ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% #>  resample_seed(qsip_list_4) #> # A tibble: 6 × 2 #>   group                seed #>   <chr>               <dbl> #> 1 Drought                42 #> 2 Drought against all    42 #> 3 Normal                 42 #> 4 Normal_S178            42 #> 5 Normal_S179            42 #> 6 Normal_S180            42 summarize_EAF_values(qsip_list_3) |>   filter(feature_id == \"ASV_1\") #> Confidence level = 0.9 #> # A tibble: 6 × 10 #>   group              feature_id observed_EAF mean_resampled_EAF   lower    upper #>   <chr>              <chr>             <dbl>              <dbl>   <dbl>    <dbl> #> 1 Drought            ASV_1         -0.0492             -0.0489  -0.108   0.0113  #> 2 Drought against a… ASV_1         -0.0334             -0.0328  -0.0798  0.0195  #> 3 Normal             ASV_1          0.000455            0.00138 -0.0326  0.0357  #> 4 Normal_S178        ASV_1          0.0410              0.0421   0.0214  0.0606  #> 5 Normal_S179        ASV_1         -0.0256             -0.0251  -0.0454 -0.00603 #> 6 Normal_S180        ASV_1         -0.0140             -0.0141  -0.0378  0.00564 #> # ℹ 4 more variables: labeled_resamples <int>, unlabeled_resamples <int>, #> #   labeled_sources <int>, unlabeled_sources <int> summarize_EAF_values(qsip_list_3) |>   filter(feature_id == \"ASV_311\") #> Confidence level = 0.9 #> # A tibble: 2 × 10 #>   group feature_id observed_EAF mean_resampled_EAF lower upper labeled_resamples #>   <chr> <chr>             <dbl>              <dbl> <dbl> <dbl>             <int> #> 1 Drou… ASV_311           0.906              0.903 0.650 1.14               1000 #> 2 Drou… ASV_311           0.693              0.693 0.535 0.867              1000 #> # ℹ 3 more variables: unlabeled_resamples <int>, labeled_sources <int>, #> #   unlabeled_sources <int> plot_EAF_values(qsip_list_3[c(\"Drought\", \"Normal\")],                 error = \"ribbon\",                 top = 50) #> Confidence level = 0.9"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Standard qSIP EAF Workflow","text":"complete quantitative stable isotope probing (qSIP) workflow using qSIP2 package starts three input files ends calculated excess atom fraction (EAF) values along ton intermediate data. vignette high-level walk major steps links specific vignettes detail appropriate.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"the-input-files","dir":"Articles","previous_headings":"","what":"The Input Files","title":"Standard qSIP EAF Workflow","text":"Preparing formatting input files often tedious part analysis. goal rigid (opinionated) requirements imposed qSIP2 hopefully streamline creation files, automated validation checks can remove many common sources error confusion.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"source-data","dir":"Articles","previous_headings":"The Input Files","what":"Source Data","title":"Standard qSIP EAF Workflow","text":"source data highest level metadata row corresponding original experimental source material object. example source dataframe included qSIP2 package called example_source_df. first rows example_source_df required columns valid source data including unique ID (source_mat_id), isotope isotopolog designation substrate label. Additional columns can added necessary (e.g. Moisture) grouping filtering later process. growth calculations three additional requirements - timepoint, total_abundance volume. necessary standard EAF workflow instead addressed forthcoming growth vignette. dataframe ready, next step convert qsip_source_data object. one main qSIP2 objects hold validate data. required columns metadata assigned column dataframe. example, “Isotope” column dataframe assigned isotope parameter qsip_source_data object. object modifies column names standard names supplied function. column names dataframe already match expected standard names, can skip assigning identified correctly. dataframe original headers can recovered using get_dataframe() method original_headers = T option. See vignette(\"source_data\") details working source data.","code":"source_object <- qsip_source_data(example_source_df,   isotope = \"Isotope\",   isotopolog = \"isotopolog\",   source_mat_id = \"source\" )  class(source_object) #> [1] \"qsip_source_data\" \"S7_object\" get_dataframe(source_object, original_headers = T)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"sample-data","dir":"Articles","previous_headings":"The Input Files","what":"Sample Data","title":"Standard qSIP EAF Workflow","text":"sample metadata next level detail one row fraction, one row set fastq files sequenced. first rows example_sample_df , several necessary columns valid sample data, including unique sample ID (sample_id), source came (source_mat_id), fraction ID (gradient_position), fraction density (gradient_pos_density) measure abundance (total DNA qPCR copy number) fraction (gradient_pos_amt). additional column can derived percent abundance total sample found fractions. add_gradient_pos_rel_amt() function can help calculate dividing fraction abundance total abundance source putting gradient_pos_rel_amt column. need already relative amounts calculated dataframe. Additional gradient_pos_rel_amt column added , make qSIP2 object data, time qsip_sample_data object. columns dataframe assigned appropriate parameters, column names exactly matching parameter name automatically identified. Similar source_data , names sample_data object modified original names standardized names. See vignette(\"sample_data\") information working sample data including built-validations.","code":"sample_df <- example_sample_df |>   add_gradient_pos_rel_amt(source_mat_id = \"source\", amt = \"avg_16S_g_soil\") sample_object <- qsip_sample_data(sample_df,   sample_id = \"sample\",   source_mat_id = \"source\",   gradient_position = \"Fraction\",   gradient_pos_density = \"density_g_ml\",   gradient_pos_amt = \"avg_16S_g_soil\",   gradient_pos_rel_amt = \"gradient_pos_rel_amt\" )  class(sample_object) #> [1] \"qsip_sample_data\" \"S7_object\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"feature-data","dir":"Articles","previous_headings":"The Input Files","what":"Feature Data","title":"Standard qSIP EAF Workflow","text":"Finally, last three necessary input files feature abundance table, aka “OTU table” “ASV table”. format dataframe unique feature IDs first column, additional column sample. row contains whole number (non-normalized) counts feature sample. now, validation step defaults requiring values counts (positive integers), type options include coverage (working MAGs metagenomes), relative already relative abundances normalized spike-ins another method determines correct abundance sample. First bit example_feature_df See vignette(\"feature_data\") details.","code":"feature_object <- qsip_feature_data(example_feature_df,   feature_id = \"ASV\" )  class(feature_object) #> [1] \"qsip_feature_data\" \"S7_object\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"the-qsip_data-object","dir":"Articles","previous_headings":"","what":"The qsip_data Object","title":"Standard qSIP EAF Workflow","text":"qsip_data class main workhorse object qSIP2 package. built validated versions three previous objects, meant self-contained object necessary information analysis. function report source_mat_ids shared source sample data, sample_ids shared sample feature data. reports unshared ids, can access show_unshared_ids(qsip_object), note just warning stop creation qSIP object.","code":"qsip_object <- qsip_data(   source_data = source_object,   sample_data = sample_object,   feature_data = feature_object ) #> There are 15 source_mat_ids, and they are all shared between the source and sample objects #> There are 284 sample_ids, and they are all shared between the sample and feature objects  class(qsip_object) #> [1] \"qsip_data\" \"S7_object\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"visualizations","dir":"Articles","previous_headings":"The qsip_data Object","what":"Visualizations","title":"Standard qSIP EAF Workflow","text":"Behind scenes, creation object also runs calculations, particularly getting weighted-average density (WAD) feature source, also tube relative abundance feature. , certain visualizations can made built-functions.   Another sanity check making sure reported density values reasonably straight line gradient position. can plotted, Cook’s distance can calculated highlight outliers. Note, ends gradient often flagged outliers, although may necessarily case.  design qsip_data object contains “slots” new analysis step. Although create new object step workflow, can assign output step back original object order keep everything together.","code":"plot_source_wads(qsip_object,                   group = \"Moisture\",                  title = \"WAD of each source, grouped by Moisture\") plot_sample_curves(qsip_object,                    colors = c(\"12C\" = \"orange\", \"13C\" = \"magenta\"),                    title = \"Normalized density curves for each sample\") plot_density_outliers(qsip_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"main-workflow","dir":"Articles","previous_headings":"","what":"Main Workflow","title":"Standard qSIP EAF Workflow","text":"Now validated qsip_data object, can start main workflow consisting comparison grouping, filtering, resampling finally calculating EAF values.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"comparison-grouping","dir":"Articles","previous_headings":"Main Workflow","what":"Comparison Grouping","title":"Standard qSIP EAF Workflow","text":"qsip_data object likely contains data, may want run comparisons certain subsets. show_comparison_groups() function attempts identify suggest sources may want compare. Output show_comparison_groups() group argument important define rows thinks constitute comparison. isotope argument defines labeled unlabeled values comparisons. can complex, particularly one isotopolog, details made available future another vignette. first row shows “Normal” moisture groups likely want use unlabeled (S149, S150, S151 S152) compare labeled (S178, S179 S180). Sometimes may also want compare specific labeled samples group unlabeled. qSIP2 package convenient way get using get_all_by_isotope() function. show_comparison_groups() function entirely informational. automated way run qSIP workflow using run_comparison_groups() function, detailed another vignette.","code":"show_comparison_groups(qsip_object,   group = \"Moisture\",   isotope = \"isotope\",   source_mat_id = \"source_mat_id\" ) get_all_by_isotope(qsip_object, \"12C\") #> [1] \"S149\" \"S150\" \"S151\" \"S152\" \"S161\" \"S162\" \"S163\" \"S164\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"filter-features","dir":"Articles","previous_headings":"Main Workflow","what":"Filter Features","title":"Standard qSIP EAF Workflow","text":"filter features step two things. First, set labeled unlabeled sources defined specific comparison. Second, can explicitly say prevalent feature must considered “present” source. words, define parameters feature must found enough replicate sources, enough samples can calculate accurate WAD value . run_feature_filter() function takes qsip_data object different parameters allowing precisely tailor filtering results. strict filtering, fewer features pass filter. Note, although said earlier can overwrite qsip_data objects go, might make sense create two versions moisture treatments. ’ll take original qsip_object save filtered Normal dataset qsip_normal', Drought toqsip_drought`. 1,705 features found “Normal” data, can see rather strict filtering removed 64 features dataset. can visualize results per-source basis plot_filter_gradient_position() function.  Although large number features removed, can tell 64 remained actually still make large proportion total abundance sample. , retained features (blue) make ~75-85% total data, removed data (orange) remaining ~15-25%. B, can see surprisingly large number features found 0 times many sources (gray) therefore never present regardless filtering choices. although ~100-200 features passed filtering requirements (blue), requirement min_unlabeled_sources = 6 min_labeled_sources = 3 means features present many blue slices retained, leaving 64 total. Let’s comparison drought samples. 89 features retained Drought dataset.  Strictly speaking, requirement strict filtering, possible execute run_feature_filter() parameters set 1. Filtering originally recommended dramatically sped compute time, running vs. subset features qSIP2 minimal impact. , setting values 1 utilizing allow_failures flag resampling step can provide alternative way deciding features keep, rather just prevalence amongst sources/samples. information provided Resampling section , vignette(\"resampling\") vignette. Importantly, since relative abundances already calculated feature, subsequent steps qSIP pipeline keep feature’s computations independent, results specific feature identical regardless whether features included filtered .","code":"qsip_normal <- run_feature_filter(qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S178\", \"S179\", \"S180\"),   min_unlabeled_sources = 6,   min_labeled_sources = 3,   min_unlabeled_fractions = 6,   min_labeled_fractions = 6 ) #> There are initially 2030 unique feature_ids #> 1705 of these have abundance in at least one fraction of one source_mat_id #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by fraction... #> 1519 unlabeled and 1417 labeled feature_ids were found in zero fractions in at least one source_mat_id #> 1440 unlabeled and 830 labeled feature_ids were found in too few fractions in at least one source_mat_id #> 299 unlabeled and 209 labeled feature_ids passed the fraction filter #> In total, 346 unique feature_ids passed the fraction filtering requirements... #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by source... #> 47 unlabeled and 137 labeled feature_ids failed the source filter because they were found in zero sources #> 196 unlabeled and 127 labeled feature_ids failed the source filter because they were found in too few sources #> 103 unlabeled and 82 labeled feature_ids passed the source filter #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> In total, 64 unique feature_ids passed all fraction and source filtering requirements plot_filter_gradient_position(qsip_normal) qsip_drought <- run_feature_filter(qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S200\", \"S201\", \"S202\", \"S203\"),   min_unlabeled_sources = 6,   min_labeled_sources = 3,   min_unlabeled_fractions = 6,   min_labeled_fractions = 6 ) #> There are initially 2030 unique feature_ids #> 1877 of these have abundance in at least one fraction of one source_mat_id #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by fraction... #> 1691 unlabeled and 1558 labeled feature_ids were found in zero fractions in at least one source_mat_id #> 1440 unlabeled and 1212 labeled feature_ids were found in too few fractions in at least one source_mat_id #> 299 unlabeled and 285 labeled feature_ids passed the fraction filter #> In total, 367 unique feature_ids passed the fraction filtering requirements... #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by source... #> 68 unlabeled and 82 labeled feature_ids failed the source filter because they were found in zero sources #> 196 unlabeled and 171 labeled feature_ids failed the source filter because they were found in too few sources #> 103 unlabeled and 114 labeled feature_ids passed the source filter #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> In total, 89 unique feature_ids passed all fraction and source filtering requirements plot_filter_gradient_position(qsip_drought)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"resampling","dir":"Articles","previous_headings":"Main Workflow","what":"Resampling","title":"Standard qSIP EAF Workflow","text":"weighted average density (WAD) values automatically calculated creation qsip_data object earlier. order calculate confidence interval EAF values, first need run resampling/bootstrapping procedure WAD values. example, feature found 6 unlabeled sources 6 WAD values, 6 WAD values resampled many times obtain bootstrapped mean WAD values. step requires random sampling good practice set “seed”. Rather outside function, can pass seed argument. leave blank, generate random seed. seed generate results time run resampling process. Ressampling drought dataset. Notice step overwriting original qsip_drought results run_resampling(), rather creating new objects. possible get resampling error filtering strict. , consult vignette(\"resampling\") vignette consider running allow_failures = T.","code":"qsip_normal <- run_resampling(qsip_normal,   resamples = 1000,   with_seed = 17,   progress = FALSE ) qsip_normal_17_again <- run_resampling(qsip_normal,   resamples = 1000,   with_seed = 17,   progress = FALSE )  # two runs are identical identical(qsip_normal, qsip_normal_17_again) #> [1] TRUE identical(qsip_normal@resamples$l[[334]], qsip_normal_17_again@resamples$l[[334]]) #> [1] TRUE  # but individual resamplings within are different identical(qsip_normal@resamples$l[[1]], qsip_normal@resamples$l[[2]]) #> [1] FALSE qsip_drought <- run_resampling(qsip_drought,   resamples = 1000,   with_seed = 17,   progress = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"eaf-calculations","dir":"Articles","previous_headings":"Main Workflow","what":"EAF Calculations","title":"Standard qSIP EAF Workflow","text":"finally last main step, calculating summarizing excess atom fraction (EAF) values. two functions run, first (run_EAF_calculations()) calculate EAF observed data resamplings, second (summarize_EAF_values()) summarizes data chosen confidence interval. split two functions simply run_EAF_calculations() can take little longer, allowing different parameters tried summarize_EAF_values() without recalculate everything. ’ll also mutate() add original Moisture condition dataframe combine . can plot top 50 moisture condition.   plot_feature_curves() function allows us plot tube relative abundances specific feature IDs. Let’s look two high EAF values, two low values.","code":"qsip_normal <- run_EAF_calculations(qsip_normal) qsip_drought <- run_EAF_calculations(qsip_drought)  normal <- summarize_EAF_values(qsip_normal, confidence = 0.9) |>   mutate(Moisture = \"Normal\") #> Confidence level = 0.9  drought <- summarize_EAF_values(qsip_drought, confidence = 0.9) |>   mutate(Moisture = \"Drought\") #> Confidence level = 0.9  eaf <- rbind(normal, drought) plot_EAF_values(qsip_normal,                  top = 50,                  confidence = 0.9,                  error = \"ribbon\",                 title = \"Normal moisture\") #> Confidence level = 0.9 plot_EAF_values(qsip_drought,                  top = 50,                  confidence = 0.9,                  error = \"ribbon\",                 title = \"Drought moisture\") #> Confidence level = 0.9 plot_feature_curves(qsip_normal,   feature_ids = c(\"ASV_55\", \"ASV_84\", \"ASV_41\", \"ASV_44\"),   title = \"Density curves of selected features\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"working-with-multiple-qsip-objects-preview","dir":"Articles","previous_headings":"","what":"Working with multiple qSIP objects (preview)","title":"Standard qSIP EAF Workflow","text":"possible work multiple qsip_data objects list. detailed forthcoming vignette, sneak peak can use existing summarize_EAF_values() plot_EAF_values() functions.","code":"qsip_list = list(\"Normal\" = qsip_normal,                  \"Drought\" = qsip_drought) summarize_EAF_values(qsip_list) #> Confidence level = 0.9 plot_EAF_values(qsip_list,                  top = 50,                 confidence = 0.9,                  error = \"bar\") #> Confidence level = 0.9"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"piped-workflow","dir":"Articles","previous_headings":"","what":"Piped Workflow","title":"Standard qSIP EAF Workflow","text":"Although workflow often easier understand troubleshoot broken individual steps, possible run entire workflow single pipe. example, normal moisture data filtered, resampled EAF values calculated single pipe.","code":"# example code, not executed. Default values are not shown.  qsip_normal <- run_feature_filter(qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S178\", \"S179\", \"S180\"),   min_unlabeled_sources = 6,   min_labeled_sources = 3 ) |>   run_resampling() |>   run_EAF_calculations()"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Resampling","text":"qSIP2 use resampling weighted average densities (WADs) obtain confidence intervals WADs within replicates type (unlabeled vs labeled) well shift average WADs types. resampling simple bootstrap procedure source WADs feature_id sampled replacement nn times.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"resampling-in-r","dir":"Articles","previous_headings":"","what":"Resampling in R","title":"Resampling","text":"Let’s assume WAD dataset 4 sources labeled - D. Sampling 4 values replacement lead duplicates values missing. example, see B sampled twice (denoted “.1”) C sampled . can wrap purrr::map() function sample nn times. output bit messy “.1” column name shown, still 4 values per row excluding NA values.","code":"WADs <- data.frame(\"A\" = 1.679, \"B\" = 1.691, \"C\" = 1.692, \"D\" = 1.703) sample(WADs, replace = TRUE) n <- 5 purrr::map_df(1:n,                ~sample(WADs,                        replace = TRUE,                        size = 4))"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"qsip2-resampling","dir":"Articles","previous_headings":"","what":"qSIP2 resampling","title":"Resampling","text":"qSIP2 package function called run_resampling() perform resampling procedure filtered qSIP_data object. object must first filtered run_feature_filter() function, ’ll come back filtering affects resampling bit. Setting resamples = 1000 give 1000 resamplings feature. resampling deterministic procedure, use seed recommended using with_seed argument.","code":"q <- run_feature_filter(example_qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(example_qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S178\", \"S179\", \"S180\"),   min_unlabeled_sources = 3,   min_labeled_sources = 3,   min_unlabeled_fractions = 6,   min_labeled_fractions = 6,   quiet = TRUE # running with quiet = TRUE to suppress messages )   q <- run_resampling(q,   resamples = 1000,   with_seed = 19,   progress = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"under-the-hood","dir":"Articles","previous_headings":"qSIP2 resampling","what":"Under the hood","title":"Resampling","text":"Internally, qSIP2 code function called makes resampling output bit tidy. removing original names prepending type. , data “labeled” type, resampled values columns labeled_1, labeled_2, etc. also keep data tidy adding additional columns useful. function called directly user, shown just example resampling procedure. Example resampling 4 WAD values 5 times","code":"purrr::map_df(1:n, \\(i) calculate_resampled_wads(i, WADs, \"labeled\"))"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"inspect-resample-results","dir":"Articles","previous_headings":"","what":"Inspect resample results","title":"Resampling","text":"resampling results stored qSIP_data object @resamples slot, necessarily intended worked directly. Instead, qSIP_data object helper functions like n_resamples() resample_seed() return number resamples performed seed used, respectively.","code":"n_resamples(q) #> [1] 1000 resample_seed(q) #> [1] 19"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"dataframe-of-resampled-wads","dir":"Articles","previous_headings":"Inspect resample results","what":"Dataframe of resampled WADs","title":"Resampling","text":"want data , can access get_resample_data() function appropriate arguments. Note, set pivot = TRUE dataframe can quite large take assemble/display.","code":"get_resample_data(q) #> # A tibble: 74,000 × 13 #>    feature_id resample unlabeled_1 unlabeled_2 unlabeled_3 unlabeled_4 #>    <chr>         <int>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 ASV_1             1        1.70        1.70        1.71        1.70 #>  2 ASV_10            1        1.71        1.71        1.71        1.72 #>  3 ASV_104           1        1.71        1.71        1.71        1.71 #>  4 ASV_108           1        1.72        1.71        1.72        1.72 #>  5 ASV_11            1        1.72        1.71        1.71        1.72 #>  6 ASV_112           1        1.71        1.71        1.71        1.71 #>  7 ASV_114           1        1.71        1.71        1.72        1.72 #>  8 ASV_119           1        1.72        1.71        1.71        1.72 #>  9 ASV_12            1        1.71        1.71        1.71        1.72 #> 10 ASV_13            1        1.71        1.71        1.71        1.71 #> # ℹ 73,990 more rows #> # ℹ 7 more variables: unlabeled_5 <dbl>, unlabeled_6 <dbl>, unlabeled_7 <dbl>, #> #   unlabeled_8 <dbl>, labeled_1 <dbl>, labeled_2 <dbl>, labeled_3 <dbl>"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"visualizing-range-of-mean-resampled-wads","dir":"Articles","previous_headings":"Inspect resample results","what":"Visualizing range of mean resampled WADs","title":"Resampling","text":"Rather seeing resampled data , often interested range mean WAD values resampling iteration. can leave feature_id argument empty see features, can specify single feature vector features. , select 3 random feature_ids show.  Additional arguments can called add confidence intervals (bars lines) different confidence limit (default = 0.9).","code":"random_features <- sample(get_feature_ids(q, filtered = T), 3) plot_feature_resamplings(q,                           feature_id = random_features) #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's colour values. plot_feature_resamplings(q,                           feature_id = random_features,                          interval = \"bar\",                          confidence = 0.95) +   labs(title = \"With confidence interval bars\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"when-resampling-goes-wrong","dir":"Articles","previous_headings":"","what":"When resampling goes wrong","title":"Resampling","text":"resampling procedure simple bootstrap procedure, without limitations. common issue sources filtering requires, end WADs contain NA values. Take ASV_72 example, found 1 labeled sources (S178) fraction threshold, removed previous filtering step. , filtering requirements less strict (e.g. setting min_labeled_sources = 1), feature make filtering. now get error running resampling step suggesting increase filtering stringency. happening resampling done consistently across feature_ids, although one labeled source ASV_72, two sources (S179 S180) included resampling WAD value NaN (“number”, .e. numeric form NA). Bootstrapping vector 2/3s NaN fairly often return NaN values, therefore mean undefined. previous error message suggests increasing min_labeled_sources remove number NaN values passed resampling.","code":"q2 <- run_feature_filter(example_qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(example_qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S178\", \"S179\", \"S180\"),   min_unlabeled_sources = 3,   min_labeled_sources = 1,   min_unlabeled_fractions = 6,   min_labeled_fractions = 6,   quiet = TRUE ) # running with quiet = TRUE to suppress messages run_resampling(q2,   resamples = 1000,   with_seed = 19,   progress = FALSE ) #> Error in `purrr::map()`: #> ℹ In index: 10. #> Caused by error: #> ! Something went wrong with resampling... #> It is possible that some resampled features contained only <NA> WAD values leading to a failure in calculate_Z(). #> Try increasing your filtering stringency to remove features not found in most sources"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"allow-failures","dir":"Articles","previous_headings":"When resampling goes wrong","what":"Allow failures","title":"Resampling","text":"Although increasing stringency can remove error, also remove features dataset. want keep features (e.g. didn’t want ASV_72 removed), can set allow_failures = TRUE run_resampling() function. allow resampling continue, also return warning message resampling failed iterations features. warning message lets us know problems unlabeled resampling, 4 features failures labeled sources. can see features failures get_resample_counts() filtering values nn less 1000 (number resamples). , see indeed ASV_72 successful 693 1000 resamplings. Statistically, may conclude 693 resamplings still robust enough accept conclusion. inspecting plot 3 features show something strange ASV_72 may still choose remove analysis.  can see resampling successes feature plot_successful_resamples() function, histogram shows features 1000 successful resamplings.","code":"q2 <- run_resampling(q2,   resamples = 1000,   with_seed = 19,   allow_failures = TRUE,   progress = FALSE ) #> Warning: NA unlabeled and NA labeled feature_ids had resampling failures. Run #> `get_resample_counts()` or `plot_successful_resamples()` on your <qsip_data> #> object to inspect. get_resample_counts(q2) |>    filter(labeled_resamples < 1000 | unlabeled_resamples < 1000) #> # A tibble: 4 × 3 #>   feature_id labeled_resamples unlabeled_resamples #>   <chr>                  <int>               <int> #> 1 ASV_149                  961                1000 #> 2 ASV_155                  968                1000 #> 3 ASV_161                  961                1000 #> 4 ASV_72                   693                1000 plot_feature_resamplings(q2,                           feature_id = c(\"ASV_72\", \"ASV_155\", \"ASV_161\"),                           intervals = \"bar\") plot_successful_resamples(q2)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"using-success-results-for-further-filtering","dir":"Articles","previous_headings":"When resampling goes wrong","what":"Using success results for further filtering","title":"Resampling","text":"Suppose want overlay success data final EAF plot can decide enough resampling support trust EAF value obtain. easy , can modify point color based passing threshold. use success rate 90% (.e. 900 1000 resamples) threshold . , can see although green, ASV_72 show highly enriched confidence interval clear 0. , red dot flags suspect warrants deeper look.","code":"EAF = run_EAF_calculations(q2)  plot_EAF_values(EAF,                  error = \"ribbon\",                 success_ratio = 0.9) #> Confidence level = 0.9"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Resampling","text":"conclusion, instead pre-filtering data based number sources fractions, can use resampling procedure determine data robust enough proceed. especially useful large dataset want ensure removing features informative.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"samples-and-metadata","dir":"Articles","previous_headings":"","what":"Samples and Metadata","title":"Sample Data","text":"qSIP2, “sample data” refers metadata associated individual fractions sequencing data. second level metadata - granular “source data”, higher-level “feature data”. word sample typically refers biological environmental entity DNA isolated (aka source material). qSIP, however, multiple sequencing runs per source, term sample historically reserved sequencing fraction. practice, means many samples single source. keep proposed MISIP1 standards, source material coded source_mat_id, sequencing run/fraction coded sample_id. sample data requirements pass validation three qSIP2 input types. standardize requirements column names adhere closely MISIP standards possible. Absolute requirements slightly different official MISIP standards, qSIP2 package source_mat_id, sample_id, gradient_position, gradient_pos_density gradient_pos_rel_amt fields.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"source_mat_id-and-sample_id-columns","dir":"Articles","previous_headings":"Samples and Metadata","what":"source_mat_id and sample_id columns","title":"Sample Data","text":"One column metadata contain unique sample_id associated source_mat_id matches one row qsip_source_data dataframe. Although sample_id unique row, expected source_mat_id duplicated creating many--one relationship. format sample_id doesn’t matter, long unique. popular choice might source_mat_id appended gradient position.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"gradient_position-and-gradient_pos_density-columns","dir":"Articles","previous_headings":"Samples and Metadata","what":"gradient_position and gradient_pos_density columns","title":"Sample Data","text":"required columns describe position density values sample_id. gradient_position typically numbered decreasing density, heaviest 1, second heaviest 2, etc. pass qSIP2 validation gradient_position must positive integer, -1 also accepted designate “bulk” “unfractionated” sample (e.g. growth analysis). gradient_position used directly qSIP2 calculations can useful quality control. gradient_pos_density reported g/ml much decimal place precision method allows.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"gradient_pos_amt-and-gradient_pos_rel_amt-columns","dir":"Articles","previous_headings":"Samples and Metadata","what":"gradient_pos_amt and gradient_pos_rel_amt columns","title":"Sample Data","text":"requirement qSIP gradient_pos_rel_amt field, gives percent amount fraction whole. preferred method given qPCR copy numbers per volume source material, DNA totals/concentrations can used well. gradient_pos_rel_amt column required MISIP standards, qSIP2 also require additional gradient_pos_amt column “raw” abundance values sample. requirement typically qSIP workflow produce gradient_pos_amt values, gradient_pos_rel_amt can derived using add_gradient_pos_rel_amt() function. function simply totals gradient_pos_amt sample source, divides total. math whether using qPCR amplicon copies total DNA isolated. example, 100,000 total 16S copies source determined qPCR, 15,000 copies fraction 7, gradient_pos_rel_amt value fraction 7 0.15 (15,000 / 100,000). Similarly, 25ng total DNA used density separation, fraction 7 3.75 ng DNA recovered, gradient_pos_rel_amt also 0.15 (3.75 / 25). See cases might make sense totals add 100%, work cases qSIP2. example sample dataframe included qSIP2 package demonstrate possible columns. First rows formatted sample data","code":"example_sample_df"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"qsip2-sample-data-object","dir":"Articles","previous_headings":"","what":"qSIP2 Sample Data Object","title":"Sample Data","text":"qsip_sample_data() constructor builds sample data object dataframe. Like source data object, sample data object built providing column names appropriate parameters. Notice dataframe contain required gradient_pos_rel_amt column, function able calculate using data gradient_pos_amt column. See reasons might want pre-calculate value rather function calculate .","code":"sample_object <- qsip_sample_data(example_sample_df,   sample_id = \"sample\",   source_mat_id = \"source\",   gradient_position = \"Fraction\",   gradient_pos_density = \"density_g_ml\",   gradient_pos_amt = \"avg_16S_g_soil\" ) #> <gradient_pos_rel_amt> not specified. Calculating using avg_16S_g_soil column"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"structure-of-qsip_sample_data","dir":"Articles","previous_headings":"qSIP2 Sample Data Object","what":"Structure of qsip_sample_data","title":"Sample Data","text":"Like qSIP2 objects, qsip_sample_data object list key components, meant inspected directly. dataframe can returned object using get_dataframe() function. First rows formatted sample data","code":"glimpse(sample_object) #> <qsip_sample_data> #>  @ data                : tibble [284 × 7] (S3: tbl_df/tbl/data.frame) #>  $ sample_id           : chr [1:284] \"149_F1\" \"149_F2\" \"149_F3\" \"149_F4\" ... #>  $ source_mat_id       : chr [1:284] \"S149\" \"S149\" \"S149\" \"S149\" ... #>  $ gradient_position   : int [1:284] 1 2 3 4 5 6 7 8 9 10 ... #>  $ gradient_pos_density: num [1:284] 1.78 1.77 1.77 1.76 1.75 ... #>  $ gradient_pos_amt    : num [1:284] 4474 987 4003 3960 5726 ... #>  $ gradient_pos_rel_amt: num [1:284] 1.28e-04 2.83e-05 1.15e-04 1.14e-04 1.64e-04 ... #>  $ dna_conc            : num [1:284] 0 0 0 0 0.00124 ... #>  @ sample_id           : chr \"sample\" #>  @ source_mat_id       : chr \"source\" #>  @ gradient_position   : chr \"Fraction\" #>  @ gradient_pos_density: chr \"density_g_ml\" #>  @ gradient_pos_amt    : chr \"avg_16S_g_soil\" #>  @ gradient_pos_rel_amt: chr \"gradient_pos_rel_amt\" get_dataframe(sample_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"validation-of-qsip_sample_data","dir":"Articles","previous_headings":"qSIP2 Sample Data Object","what":"Validation of qsip_sample_data","title":"Sample Data","text":"valid qsip_sample_data object required columns, sample_id contain unique values, gradient_position positive integers -1. Additionally, density_g_ml values reasonable range (1.55 1.8)","code":"# modifying density_g_ml to be too low will give an error example_sample_df |>   mutate(density_g_ml = density_g_ml / 2) |>   qsip_sample_data(     sample_id = \"sample\",     source_mat_id = \"source\",     gradient_position = \"Fraction\",     gradient_pos_density = \"density_g_ml\",     gradient_pos_amt = \"avg_16S_g_soil\"   ) #> <gradient_pos_rel_amt> not specified. Calculating using avg_16S_g_soil column #> Error in qSIP2::validate_gradient_pos_density(dplyr::select(self@data, : some gradient_pos_density values are lower than 1.55"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"when-to-calculate-the-gradient_pos_rel_amt-values","dir":"Articles","previous_headings":"","what":"When to calculate the gradient_pos_rel_amt values?","title":"Sample Data","text":"Typically gradient_pos_rel_amt given source_mat_id add 1 (.e. 100%), situations might less 1 (although never greater ). example, removed fractions didn’t sequence well reason remove fraction. removed fractions 5% total data source_mat_id, expect total fractions 0.95 rather 1. Another situation although added 25ng centrifugation, recovered 20ng rest lost2. matters run add_gradient_pos_rel_amt() function dataframe totals add 1. can remove rows dataframe don’t want include analysis, sum gradient_pos_rel_amt values equal appropriately adjusted amount. , remove bad rows dataframe first, let qsip_sample_data() function create gradient_pos_rel_amt values, artificially higher . can use total abundance (qPCR DNA concentrations) calculate gradient_pos_rel_amt column. sample data gradient_pos_rel_amt added Trying run function dataframe existing gradient_pos_rel_amt give error, can overridden overwrite = T flag.","code":"add_gradient_pos_rel_amt(example_sample_df,   source_mat_id = \"source\",   amt = \"avg_16S_g_soil\" ) add_gradient_pos_rel_amt(example_sample_df,   source_mat_id = \"source\",   amt = \"avg_16S_g_soil\" ) |>   add_gradient_pos_rel_amt(     source_mat_id = \"source\",     amt = \"avg_16S_g_soil\"   ) #> Error: gradient_pos_rel_amt already exists! Set overwrite = TRUE if you want to overwrite # set overwrite = TRUE to override the error, although this is a silly example here add_gradient_pos_rel_amt(example_sample_df,   source_mat_id = \"source\",   amt = \"avg_16S_g_soil\" ) |>   add_gradient_pos_rel_amt(     source_mat_id = \"source\",     amt = \"avg_16S_g_soil\",     overwrite = TRUE   )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"source-material-and-metadata","dir":"Articles","previous_headings":"","what":"Source Material and Metadata","title":"Source Data","text":"SIP experiment, “source material” subjects running experiments (e.g. culture tube plant root). qSIP source material DNA extraction loaded column isopycnic centrifugation. “source data” highest level metadata row corresponding original experimental source material object. source fractionated samples, one--many relationship “sample data” (see vignette(\"sample_data\")). required columns valid source data including unique ID (source_mat_id), measure quantitative abundance source material (either total DNA qPCR copies), isotope substrate designation (isotope isotopolog, respectively). Ideally, substrate standardized compound ID (e.g. PubChem 6137 L-methionine), qSIP2 can just descriptive text like “methionine”. addition required columns, source data can contain many ancillary columns necessary describe experiment. additional columns might contain important experiment-specific metadata use group subset source material qSIP workflow. , can also details might need qSIP, may make sense just keep everything included ’re already .txt. excel file. example source dataframe included qSIP2 package called example_source_df. includes 13C glucose addition study two different moisture treatments (“normal” “drought”) quadruplicate, one triplicate. experiment contains unlabeled 12C labeled 13C source material, may experiment different 13C treatments share 12C source material. example, split experiment one 12C data set split many experimental conditions different isotopolog. first rows example_source_df","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"qsip2-source-data-object","dir":"Articles","previous_headings":"","what":"qSIP2 Source Data Object","title":"Source Data","text":"dataframe ready least three required columns (source_mat_id, isotope isotopolog), next step convert qsip_source_data object. one main qSIP2 objects hold validate data. three columns required EAF workflow, additional columns required growth workflow (timepoint, total_abundance volume). can remain empty/unassigned vignette, detailed forthcoming growth workflow vignette. Note, column names dataframe don’t specifically required column names, need edit original table headers don’t match. example, ’re isotopolog column titled “substrate”, isn’t necessary rename column. column names already standardized names, need assign creating object. example, isotopolog column already title “isotopolog”, omitted object creation column still identified used.","code":"source_object <- qsip_source_data(example_source_df,   isotope = \"Isotope\",   isotopolog = \"isotopolog\",   source_mat_id = \"source\" )  class(source_object) #> [1] \"qsip_source_data\" \"S7_object\" # this will still work even though the isotopolog parameter is not assigned qsip_source_data(example_source_df,   isotope = \"Isotope\",   source_mat_id = \"source\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"structure-of-qsip_source_data","dir":"Articles","previous_headings":"qSIP2 Source Data Object","what":"Structure of qsip_source_data","title":"Source Data","text":"object meant inspected worked outside qSIP2 functions, quick glimpse() can show structure . original dataframe contained @data slot, however, column names modified standard names, keeping record original names corresponding slots. Column name differences get dataframe back qsip_source_data object can use get_dataframe() method original_headers set TRUE FALSE, depending needs. , note columns may different order dataframe started .","code":"glimpse(source_object) #> <qsip_source_data> #>  @ data           : tibble [15 × 6] (S3: tbl_df/tbl/data.frame) #>  $ isotope           : chr [1:15] \"12C\" \"12C\" \"12C\" \"12C\" ... #>  $ isotopolog        : chr [1:15] \"glucose\" \"glucose\" \"glucose\" \"glucose\" ... #>  $ source_mat_id     : chr [1:15] \"S149\" \"S150\" \"S151\" \"S152\" ... #>  $ total_copies_per_g: num [1:15] 34838665 53528072 95774992 9126192 41744046 ... #>  $ total_dna         : num [1:15] 74.5 109 182.2 23.7 67.6 ... #>  $ Moisture          : chr [1:15] \"Normal\" \"Normal\" \"Normal\" \"Normal\" ... #>  @ isotope        : chr \"Isotope\" #>  @ isotopolog     : chr \"isotopolog\" #>  @ source_mat_id  : chr \"source\" #>  @ timepoint      : chr \"NULL\" #>  @ total_abundance: chr \"NULL\" #>  @ volume         : chr \"NULL\" get_dataframe(source_object, original_headers = T)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"validation-of-qsip_source_data","dir":"Articles","previous_headings":"qSIP2 Source Data Object","what":"Validation of qsip_source_data","title":"Source Data","text":"constructing qsip_source_data object validation checks performed. now, checks source_mat_id unique row, isotope field appropriate value. doesn’t just mean value makes sense, also one isotopes qSIP2 knows calculate atom fraction values . currently limited 12C/13C, 14N/15N 16O/18O. “non-isotopic” names allowed well source material might unfractionated. additional options “bulk”, “unfractionated”, “T0”, “time0”, “Time0”, added exceptions validate_isotopes() helper function. One benefit validation steps embedded object validations automatically run object modified. makes impossible modify data later invalid object, e.g. changing isotope invalid choice.","code":"# artificially doubling the rows will give an error from duplicate source_mat_ids example_source_df |>   rbind(example_source_df) |>   qsip_source_data(     isotope = \"Isotope\",     isotopolog = \"isotopolog\",     source_mat_id = \"source\"   ) #> Error: some source_mat_ids are duplicated source_object@data$isotope <- \"13G\" #> invalid isotope found: 13G #> Error: Please fix the isotope names and try again"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"misip","dir":"Articles","previous_headings":"","what":"MISIP","title":"Source Data","text":"qSIP standards part MISIP1 standards, qSIP2 package little less stringent. means valid qSIP2 object might valid MISIP submission. source data level primarily difference isotope data coded, plus addition another isotopolog_label column. qSIP2 functions convert two types. add_isotoplog_label() makes MISIP version source data, remove_isotopolog_label() converts back qSIP2 compatible version. Two things changed running add_isotoplog_label() - 1) isotopolog_label column added populated either “isotopically labeled” “natural abundance” heavy light isotopes, respectively, 2) isotope column gets modified heavy isotope (e.g. “12C” entries become “13C”).","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"adding-the-isotopolog_label-column","dir":"Articles","previous_headings":"MISIP","what":"Adding the isotopolog_label column","title":"Source Data","text":"’MISIPified version example_source_df Now, Isotope column renamed isotope satisfy MISIP standards, values replaced heavy isotope. Count isotope types example_source_df_MISIP designation whether source material “light” “heavy” version isotope now transferred isotopolog_label column. Count isotopolog_label types example_source_df_MISIP","code":"example_source_df |>   add_isotopolog_label(isotope = \"Isotope\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"removing-the-isotopolog_label-column","dir":"Articles","previous_headings":"MISIP","what":"Removing the isotopolog_label column","title":"Source Data","text":"change can reverted remove_isotopolog_label() function. example_source_df_MISIP converted back Note, original exactly preserved original Isotope column MISIP standard isotope name retained.","code":"example_source_df |>   add_isotopolog_label(isotope = \"Isotope\") |>   remove_isotopolog_label()"},{"path":"https://jeffkimbrel.github.io/qSIP2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeff Kimbrel. Author, maintainer.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kimbrel J (2024). qSIP2: qSIP Analysis. R package version 0.16.11, https://jeffkimbrel.github.io/qSIP2/, https://github.com/jeffkimbrel/qSIP2.","code":"@Manual{,   title = {qSIP2: qSIP Analysis},   author = {Jeff Kimbrel},   year = {2024},   note = {R package version 0.16.11,     https://jeffkimbrel.github.io/qSIP2/},   url = {https://github.com/jeffkimbrel/qSIP2}, }"},{"path":"https://jeffkimbrel.github.io/qSIP2/index.html","id":"qsip2-","dir":"","previous_headings":"","what":"qSIP Analysis","title":"qSIP Analysis","text":"qSIP2 R package refactored reimagined version original qSIP pipeline. come!","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"qSIP Analysis","text":"can install development version qSIP2 GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jeffkimbrel/qSIP2\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_gradient_pos_rel_amt.html","id":null,"dir":"Reference","previous_headings":"","what":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","title":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","text":"function calculate relative amount fraction compared whole replicate using either qPCR copies DNA concentrations.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_gradient_pos_rel_amt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","text":"","code":"add_gradient_pos_rel_amt(   data,   amt,   source_mat_id = \"source_mat_id\",   overwrite = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_gradient_pos_rel_amt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","text":"data (dataframe) Sample metadata amt (string) Column name qPCR DNA amounts per fraction source_mat_id (string, default: \"source_mat_id\") Grouping variable replicate overwrite (bool, default: FALSE) Determines whether overwrite existing gradient_pos_rel_amt column","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_gradient_pos_rel_amt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","text":"dataframe gradient_pos_rel_amt column","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_isotopolog_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Add isotopolog_label to source data — add_isotopolog_label","title":"Add isotopolog_label to source data — add_isotopolog_label","text":"convert isotope dataframe one isotope isotopolog_label satisfy MISIP requirements","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_isotopolog_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add isotopolog_label to source data — add_isotopolog_label","text":"","code":"add_isotopolog_label(data, isotope = \"isotope\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_isotopolog_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add isotopolog_label to source data — add_isotopolog_label","text":"data (dataframe) Sample metadata isotope (string, default: \"isotope\") Column name isotope data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_isotopolog_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add isotopolog_label to source data — add_isotopolog_label","text":"dataframe isotopolog_label column added isotope column modified","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a taxonomy table to qSIP abundance data — add_taxonomy","title":"Add a taxonomy table to qSIP abundance data — add_taxonomy","text":"function designed add taxonomy data feature table, reality can hold metadata want associate features. requirement metadata table must feature id column values match feature ids qsip_feature_data object, ids must duplicated.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a taxonomy table to qSIP abundance data — add_taxonomy","text":"","code":"add_taxonomy(feature_object, taxa, feature_id)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a taxonomy table to qSIP abundance data — add_taxonomy","text":"feature_object (qsip_feature_data) object qsip_feature_data class taxa (dataframe) taxa table feature_id (string) column name feature ids match ids abundance table","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a taxonomy table to qSIP abundance data — add_taxonomy","text":"updated qsip_feature_data taxonomy slot populated taxonomy dataframe.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_EAF.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate EAF value (internal) — calculate_EAF","title":"Calculate EAF value (internal) — calculate_EAF","text":"Calculate EAF value (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_EAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate EAF value (internal) — calculate_EAF","text":"","code":"calculate_EAF(M_labeled, M, M_labeledmax, isotope)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_EAF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate EAF value (internal) — calculate_EAF","text":"M_labeled Molecular weight labeled feature M Molecular weight unlabeled feature M_labeledmax Theoretical molecular weight completely labeled feature isotope isotope determine calculation run","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_EAF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate EAF value (internal) — calculate_EAF","text":"EAF value","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate molecular weight of the labeled feature (internal) — calculate_M","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"GC value given equation usually calculated density value, derived sequence .","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"","code":"calculate_M(G)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"G (numeric) GC content feature, ranges 0-1.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"M molecular weight sequence G GC content","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"function corresponds equation 6 Hungate, 2015.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_heavy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate M_heavy — calculate_M_heavy","title":"Calculate M_heavy — calculate_M_heavy","text":"equation 4 Koch, 2018","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_heavy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate M_heavy — calculate_M_heavy","text":"","code":"calculate_M_heavy(propO, M)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_heavy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate M_heavy — calculate_M_heavy","text":"propO (numeric) proportion oxygen coming 18H2O versus sources M (numeric) mass molecule","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeled.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","text":"Calculate molecular weight labeled feature (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","text":"","code":"calculate_M_labeled(M, W_lab_mean, W_unlab_mean)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","text":"M (numeric) Molecular weight unlabeled feature W_lab_mean (numeric) WAD (mean WAD) value labeled feature W_unlab_mean (numeric) WAD (mean WAD) value unlabeled feature","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","text":"M_labeled molecular weight labeled feature","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeledmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","text":"function corresponds equation 7 Hungate, 2015","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeledmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","text":"","code":"calculate_M_labeledmax(M, atom_count, isotope, propO = 1)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeledmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","text":"M (numeric) Molecular weight unlabeled feature atom_count (numeric) count relevant atoms (C, N O) isotope (string) heavy isotope determining calculation run. Needs 13C, 15N 18O propO (numeric) Proportion oxygen atoms DNA come environmental water","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeledmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","text":"M_labeledmax theoretical maximum molecular weight labeled feature ","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_N_light_it.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate N_Light_it — calculate_N_light_it","title":"Calculate N_Light_it — calculate_N_light_it","text":"equation 3 Koch, 2018","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_N_light_it.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate N_Light_it — calculate_N_light_it","text":"","code":"calculate_N_light_it(N_total_it, M_heavy, M_labeled, M)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_N_light_it.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate N_Light_it — calculate_N_light_it","text":"N_total_it copy number feature timepoint t M_heavy theoretical molecular weight 100% labeled sequence M_labeled molecular weight labeled sequence M molecular weight unlabeled sequence","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the WAD difference Z (internal) — calculate_Z","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"just basic subtraction, probably overkill make function!","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"","code":"calculate_Z(labeled, unlabeled)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"labeled (string) column labeled WAD mean labeled WAD value unlabeled (string) column unlabeled WAD mean unlabeled WAD value","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"value difference labeled unlabeled","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"function corresponds equation 4 Hungate, 2015","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_atoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","title":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","text":"Carbon nitrogen atoms varies GC content, oxygen content constant DNA regardless GC content.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_atoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","text":"","code":"calculate_atoms(G, isotope)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_atoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","text":"G (numeric) GC percentage isotope (string) isotope use calculations... either 13C, 15N 18O","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_atoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","text":"(numeric) number atoms per nucleotide","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_bi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate birth rate — calculate_bi","title":"Calculate birth rate — calculate_bi","text":"Equation 7 Koch, 2018","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_bi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate birth rate — calculate_bi","text":"","code":"calculate_bi(   N_total_it,   N_light_it,   timepoint,   timepoint1,   growth_model = \"exponential\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_bi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate birth rate — calculate_bi","text":"N_total_it copy number feature timepoint t N_light_it copy number feature timepoint 0 (timepoint compared ) timepoint timepoint copy number measured timepoint1 timepoint compared growth_model (character, default: exponential) growth model use. Must either \"exponential\" \"linear\"","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_di.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate death rate — calculate_di","title":"Calculate death rate — calculate_di","text":"Equation 6 Koch, 2018","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_di.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate death rate — calculate_di","text":"","code":"calculate_di(   N_light_it,   N_total_i0,   timepoint,   timepoint1,   growth_model = \"exponential\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_di.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate death rate — calculate_di","text":"N_light_it unlabeled copy number feature timepoint t N_total_i0 copy number feature timepoint 0 timepoint timepoint copy number measured timepoint1 timepoint compared growth_model (character, default: exponential) growth model use. Must either \"exponential\" \"linear\"","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"function takes density value optional method returns predicted GC% content DNA sequence density.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"","code":"calculate_gc_from_density(density, method = \"MM\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"density (numeric) Density WAD values method (string, default: MM) GC% calculation method","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"vector GC% values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"method parameter changes formula provided McHugh & Morrissey (MM, unpublished) Schildkraut (S, 1962). function corresponds equation 5 Hungate, 2015","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","title":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","text":"function takes sequence counts number G C bases, divides total sequence length.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","text":"","code":"calculate_gc_from_sequence(sequence)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","text":"sequence (string) Density WAD values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","text":"vector GC% values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_resampled_wads.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","title":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","text":"Designed purrr::map() function called run_resampling.R","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_resampled_wads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","text":"","code":"calculate_resampled_wads(i, wad_data, type, allow_failures = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_resampled_wads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","text":"(integer) specific iteration resampling wad_data (dataframe) WAD dataframe resample columns type (string) Text whether wad data labeled unlabeled data allow_failures (logical) Whether allow failures resampling","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_resampled_wads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","text":"resampling data boot @resamples","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_source_wads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","title":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","text":"Calculate global weighted average density (WAD) value source_mat_id (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_source_wads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","text":"","code":"calculate_source_wads(sample_data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_source_wads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","text":"sample_data (qsip_sample_data) Sample data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_source_wads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","text":"dataframe two columns, 1) source_mat_id 2) global WAD value source_mat_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"\"tube level relative abundance\" two layers relative abundance. first takes raw_abundance counts per sample, divides total get rel_abundance values. Next, takes values divides gradient_pos_rel_amt values stored source level normalizes rel_abundance values amount sample per fraction. final value stored tube_rel_abundance column.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"","code":"calculate_tube_rel_abundance(source_data, sample_data, feature_data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"source_data (qsip_source_data) qSIP source data object sample_data (qsip_sample_data) qSIP sample data object feature_data (qsip_feature_data) qSIP feature data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"long format dataframe one row per feature_id per sample_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"speed calculations, function removes feature_ids sample abundance zero. v0.10.3 updated function different behavior feature type 'normalized'. type use raw data feature table, putting values tube_rel_abundance column.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_wads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted average density (WAD) values (internal) — calculate_wads","title":"Calculate weighted average density (WAD) values (internal) — calculate_wads","text":"Calculate weighted average density (WAD) values (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_wads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted average density (WAD) values (internal) — calculate_wads","text":"","code":"calculate_wads(tube_rel_abundance)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_wads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted average density (WAD) values (internal) — calculate_wads","text":"tube_rel_abundance (dataframe) Output calculate_tube_rel_abundance()","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_wads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weighted average density (WAD) values (internal) — calculate_wads","text":"list two objects, 1) dataframe WAD info feature_ids found least one sample, 2) fraction counts feature_ids, including found samples. also prints message screen count feature_ids entirely missing least one sample.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/completely_labeled_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","title":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","text":"Returns max labeling given isotope (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/completely_labeled_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","text":"","code":"completely_labeled_values(isotope)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/completely_labeled_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","text":"isotope heavy isotope (13C, 15N 18O)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/completely_labeled_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","text":"number representing max labeling given isotope","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Feature Abundance Dataframe — example_feature_df","title":"Example Feature Abundance Dataframe — example_feature_df","text":"example feature table abundances","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Feature Abundance Dataframe — example_feature_df","text":"","code":"example_feature_df"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_df.html","id":"example-feature-df","dir":"Reference","previous_headings":"","what":"example_feature_df","title":"Example Feature Abundance Dataframe — example_feature_df","text":"data frame 2,030 rows 285 columns: ASV unique feature ID Columns 2-285 IDs samples","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Feature Object — example_feature_object","title":"Example qSIP Feature Object — example_feature_object","text":"example qsip_feature_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Feature Object — example_feature_object","text":"","code":"example_feature_object"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_object.html","id":"example-feature-object","dir":"Reference","previous_headings":"","what":"example_feature_object","title":"Example qSIP Feature Object — example_feature_object","text":"qsip_sample_data object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_group_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data frame for run_comparison_groups() — example_group_dataframe","title":"Example data frame for run_comparison_groups() — example_group_dataframe","text":"dataframe 6 example comparisons.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_group_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data frame for run_comparison_groups() — example_group_dataframe","text":"","code":"example_group_dataframe"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_group_dataframe.html","id":"example-group-dataframe","dir":"Reference","previous_headings":"","what":"example_group_dataframe","title":"Example data frame for run_comparison_groups() — example_group_dataframe","text":"6x10 tibble","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_growth_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Growth Object — example_qsip_growth_object","title":"Example qSIP Growth Object — example_qsip_growth_object","text":"example qsip_data object growth calculations","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_growth_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Growth Object — example_qsip_growth_object","text":"","code":"example_qsip_growth_object"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_growth_object.html","id":"example-qsip-growth-object","dir":"Reference","previous_headings":"","what":"example_qsip_growth_object","title":"Example qSIP Growth Object — example_qsip_growth_object","text":"qsip_data object growth slots filled ","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_growth_t0.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Time Zero Growth Dataframe — example_qsip_growth_t0","title":"Example qSIP Time Zero Growth Dataframe — example_qsip_growth_t0","text":"example dataframe time zero abundances growth calculations","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_growth_t0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Time Zero Growth Dataframe — example_qsip_growth_t0","text":"","code":"example_qsip_growth_t0"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_growth_t0.html","id":"example-qsip-growth-t-","dir":"Reference","previous_headings":"","what":"example_qsip_growth_t0","title":"Example qSIP Time Zero Growth Dataframe — example_qsip_growth_t0","text":"364x3 tibble","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Object — example_qsip_object","title":"Example qSIP Object — example_qsip_object","text":"example qsip_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Object — example_qsip_object","text":"","code":"example_qsip_object"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_object.html","id":"example-qsip-object","dir":"Reference","previous_headings":"","what":"example_qsip_object","title":"Example qSIP Object — example_qsip_object","text":"qsip_data object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Sample Dataframe — example_sample_df","title":"Example Sample Dataframe — example_sample_df","text":"example sample data table fraction-related metadata","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Sample Dataframe — example_sample_df","text":"","code":"example_sample_df"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_df.html","id":"example-sample-df","dir":"Reference","previous_headings":"","what":"example_sample_df","title":"Example Sample Dataframe — example_sample_df","text":"data frame 284 rows 6 columns: sample unique sample id fraction source parent source id sample Fraction gradient position density_g_ml density fraction dna_conc concentration DNA post-fractionation avg_16S_g_soil qPCR amplicon count","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Sample Object — example_sample_object","title":"Example qSIP Sample Object — example_sample_object","text":"example qsip_sample_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Sample Object — example_sample_object","text":"","code":"example_sample_object"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_object.html","id":"example-sample-object","dir":"Reference","previous_headings":"","what":"example_sample_object","title":"Example qSIP Sample Object — example_sample_object","text":"qsip_sample_data object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Source Dataframe — example_source_df","title":"Example Source Dataframe — example_source_df","text":"example source data table top-level (pre-fractionation) metadata","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Source Dataframe — example_source_df","text":"","code":"example_source_df"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_df.html","id":"example-source-df","dir":"Reference","previous_headings":"","what":"example_source_df","title":"Example Source Dataframe — example_source_df","text":"data frame 15 rows 5 columns: source unique name biological replicate source_mat_id total_copies_per_g total amplicon copies determined qPCR total_dna total DNA isolated source Isotope isotope used source Moisture example relevant treatment","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Source Object — example_source_object","title":"Example qSIP Source Object — example_source_object","text":"example qsip_source_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Source Object — example_source_object","text":"","code":"example_source_object"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_object.html","id":"example-source-object","dir":"Reference","previous_headings":"","what":"example_source_object","title":"Example qSIP Source Object — example_source_object","text":"qsip_source_data object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/find_shared_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","title":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","text":"function finds shared source_mat_ids source_data sample_data, sample_ids sample_data feature_data objects. also reports ids unique object. passing qsip_data object first argument, arguments necessary. qsip_source_data given, sample_data feature_data objects must given well. Additionally, results find_share_ids() might obtained @shared slot qsip_data object. data can also \"pretty printed\" using show_unshared_ids(<qsip_data>) function.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/find_shared_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","text":"","code":"find_shared_ids(source_data, sample_data = NULL, feature_data = NULL)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/find_shared_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","text":"source_data (qsip_source_data qsip_data) qSIP object source data object sample_data (qsip_sample_data) qSIP sample data object feature_data (qsip_feature_data) qSIP feature data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/find_shared_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","text":"list two lists, one source_mat_ids one sample_ids.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/fraction_results_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter features by fraction message formatting (internal) — fraction_results_message","title":"Filter features by fraction message formatting (internal) — fraction_results_message","text":"Filter features fraction message formatting (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/fraction_results_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter features by fraction message formatting (internal) — fraction_results_message","text":"","code":"fraction_results_message(by_fraction)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/fraction_results_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter features by fraction message formatting (internal) — fraction_results_message","text":"by_fraction by_fraction dataframe run_feature_filter","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_N_total_it.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate total abundances at timepoint t — get_N_total_it","title":"Calculate total abundances at timepoint t — get_N_total_it","text":"function takes qsip_data object calculates total abundance feature time zero. done early qsip_data object still time zero data.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_N_total_it.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate total abundances at timepoint t — get_N_total_it","text":"","code":"get_N_total_it(qsip_data_object, timepoint = \"timepoint\", t = 0, group = NULL)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_N_total_it.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate total abundances at timepoint t — get_N_total_it","text":"qsip_data_object (qsip_data) object qsip_data class timepoint (character) name timepoint column source data t (numeric) value timepoint column filter group (character) name grouping variable(s) summarize counts","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_N_total_it.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate total abundances at timepoint t — get_N_total_it","text":"(data.frame) data frame feature_id total abundance time zero","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_N_total_it.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate total abundances at timepoint t — get_N_total_it","text":"Sometimes, feature abundance later time point, values time zero. feature zero abundance time zero, warning issued, feature still included output starting abundance zero.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_all_by_isotope.html","id":null,"dir":"Reference","previous_headings":"","what":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","title":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","text":"Get source_mat_ids meeting certain isotope conditions","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_all_by_isotope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","text":"","code":"get_all_by_isotope(qsip_data_object, isotopes, silent = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_all_by_isotope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","text":"qsip_data_object (qsip_data qsip_source_data) qsip object source data isotopes (string(s)) Isotopes used pull source_mat_ids. Can standard isotope name (e.g. 12C) special terms labeled unlabeled silent (boolean) TRUE, suppresses messages missing isotope hits fail","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_all_by_isotope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","text":"vector source_mat_ids. may also print messages.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the original dataframe from a qsip_feature_data object — get_dataframe","title":"Return the original dataframe from a qsip_feature_data object — get_dataframe","text":"Return original dataframe qsip_feature_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the original dataframe from a qsip_feature_data object — get_dataframe","text":"x (qsip_feature_data) qSIP feature data object original_headers (logical) Return original column names type (source, sample feature) giving qSIP object type determines dataframe retrieve","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_feature_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the feature_ids in a qsip object — get_feature_ids","title":"Return the feature_ids in a qsip object — get_feature_ids","text":"Return feature_ids qsip object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_feature_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the feature_ids in a qsip object — get_feature_ids","text":"","code":"get_feature_ids(qsip_data_object, filtered = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_feature_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the feature_ids in a qsip object — get_feature_ids","text":"qsip_data_object qSIP_data object run run_resampling() filtered (Boolean) TRUE, return feature_ids filtered data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_feature_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Return filtering info for a specific feature ID — get_filtered_feature_summary","title":"Return filtering info for a specific feature ID — get_filtered_feature_summary","text":"Return filtering info specific feature ID","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_feature_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return filtering info for a specific feature ID — get_filtered_feature_summary","text":"","code":"get_filtered_feature_summary(qsip_data_object, feature_id)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_feature_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return filtering info for a specific feature ID — get_filtered_feature_summary","text":"qsip_data_object (qsip_data) qsip data object filtered feature_id (string) specific feature_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_source_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the number of sources the feature is found in — get_filtered_source_counts","title":"Return the number of sources the feature is found in — get_filtered_source_counts","text":"Return number sources feature found ","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_source_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the number of sources the feature is found in — get_filtered_source_counts","text":"","code":"get_filtered_source_counts(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_source_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the number of sources the feature is found in — get_filtered_source_counts","text":"qsip_data_object (qsip_data) qsip data object filtered","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_growth_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataframe of resampled growth data — get_growth_data","title":"Get dataframe of resampled growth data — get_growth_data","text":"function return dataframe resampled growth data embedded qsip_data object.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_growth_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataframe of resampled growth data — get_growth_data","text":"","code":"get_growth_data(qsip_data_object, type = \"all\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_growth_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dataframe of resampled growth data — get_growth_data","text":"qsip_data_object qsip_data object run run_growth_calculations() type (string) type data return: \"\", \"unlabeled\", \"labeled\"","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_growth_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dataframe of resampled growth data — get_growth_data","text":"dataframe resampled data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer which isotope calculations to use (internal) — get_isotope_designation","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"uses list source_mat_ids filtered qsip_data object get isotope designation two reasons, 1) make sure comparable (e.g. 12C/13C, 14N/15N 16O/18O mismatches), 2) return best guess labeled isotope EAF calculations proceed correctly.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"","code":"get_isotope_designation(   qsip_data_object,   unlabeled_source_mat_ids,   labeled_source_mat_ids )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"qsip_data_object (qsip_data) qsip_data object unlabeled_source_mat_ids (character) vector source_mat_ids unlabeled labeled_source_mat_ids (character) vector source_mat_ids labeled","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"single labeled isotope designation 13C, 15N 18O, gives error inference made.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"v0.15.2 now possible mismatch. particularly important multiple isotope studies may want compare 13C sample 12C sample, also 18O 12C sample.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get counts of successful resampling — get_resample_counts","title":"Get counts of successful resampling — get_resample_counts","text":"feature_id label type, function return counts successful resampling. value typically number resamples given run_resampling(), run_resampling() called allow_failures = TRUE number successful resamples might less number resamples given.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get counts of successful resampling — get_resample_counts","text":"","code":"get_resample_counts(qsip_data_object, as_percentage = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get counts of successful resampling — get_resample_counts","text":"qsip_data_object (qsip_data) qsip data object resampled as_percentage (logical) TRUE, counts returned percentage total number resamples","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get counts of successful resampling — get_resample_counts","text":"dataframe columns feature_id, type, n","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get counts of successful resampling — get_resample_counts","text":"as_percentage TRUE, counts returned percentage total number resamples.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataframe of resampled data — get_resample_data","title":"Get dataframe of resampled data — get_resample_data","text":"function return dataframe resampled data embedded qsip_data object.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataframe of resampled data — get_resample_data","text":"","code":"get_resample_data(qsip_data_object, type = \"all\", pivot = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dataframe of resampled data — get_resample_data","text":"qsip_data_object qsip_data object run run_resampling() type (string) type data return: \"\", \"unlabeled\", \"labeled\" pivot (boolean) Whether pivot data long format keep wide","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dataframe of resampled data — get_resample_data","text":"dataframe resampled data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_source_mat_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the source_mat_ids in a qsip object — get_source_mat_ids","title":"Return the source_mat_ids in a qsip object — get_source_mat_ids","text":"Return source_mat_ids qsip object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_source_mat_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the source_mat_ids in a qsip object — get_source_mat_ids","text":"","code":"get_source_mat_ids(qsip_data_object, filtered = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_source_mat_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the source_mat_ids in a qsip object — get_source_mat_ids","text":"qsip_data_object qSIP_data object run run_resampling() filtered (Boolean) TRUE, return feature_ids filtered data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/infer_source_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a source data frame from a sample data frame — infer_source_data","title":"Generate a source data frame from a sample data frame — infer_source_data","text":"may situations verbose sample data frame data samples source materials. function attempts infer source data frame sample data frame. grouping source matrix ID checking see values column ., column kept source data frame. , column dropped.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/infer_source_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a source data frame from a sample data frame — infer_source_data","text":"","code":"infer_source_data(sample_data, source_mat_id)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/infer_source_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a source data frame from a sample data frame — infer_source_data","text":"sample_data (dataframe) data frame combined sample source data source_mat_id (string) column source_mat_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/infer_source_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a source data frame from a sample data frame — infer_source_data","text":"data frame inferred source data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check object is qsip_data type — is_qsip_data","title":"Check object is qsip_data type — is_qsip_data","text":"Check object qsip_data type","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check object is qsip_data type — is_qsip_data","text":"","code":"is_qsip_data(object, error = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check object is qsip_data type — is_qsip_data","text":"object object check qsip_data object error TRUE stops error message. FALSE error, returns FALSE","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a multi-qsip list object — is_qsip_data_list","title":"Validate a multi-qsip list object — is_qsip_data_list","text":"Validate multi-qsip list object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a multi-qsip list object — is_qsip_data_list","text":"","code":"is_qsip_data_list(object, error = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a multi-qsip list object — is_qsip_data_list","text":"object list qsip_data objects error TRUE stops error message. FALSE error, returns FALSE","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_filtered.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a qsip object has been filtered — is_qsip_filtered","title":"Validate a qsip object has been filtered — is_qsip_filtered","text":"Validate qsip object filtered","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_filtered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a qsip object has been filtered — is_qsip_filtered","text":"","code":"is_qsip_filtered(object, error = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/is_qsip_filtered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a qsip object has been filtered — is_qsip_filtered","text":"object object check filtered qsip_data object error TRUE stops error message. FALSE error, returns FALSE","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/multi_qsip_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for running the qSIP EAF workflow — multi_qsip_wrapper","title":"Wrapper for running the qSIP EAF workflow — multi_qsip_wrapper","text":"Wrapper running qSIP EAF workflow","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/multi_qsip_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for running the qSIP EAF workflow — multi_qsip_wrapper","text":"","code":"multi_qsip_wrapper(   qsip_data_object,   group = NULL,   unlabeled_source_mat_ids,   labeled_source_mat_ids,   min_unlabeled_sources = 2,   min_labeled_sources = 2,   min_unlabeled_fractions = 2,   min_labeled_fractions = 2,   allow_failures = FALSE,   resamples = 1000,   seed = NULL )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/multi_qsip_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for running the qSIP EAF workflow — multi_qsip_wrapper","text":"qsip_data_object qsip_data object group group name unlabeled_source_mat_ids vector source_mat_ids unlabeled isotope labeled_source_mat_ids vector source_mat_ids labeled isotope min_unlabeled_sources minimum number sources unlabeled isotope min_labeled_sources minimum number sources labeled isotope min_unlabeled_fractions minimum number fractions unlabeled isotope min_labeled_fractions minimum number fractions labeled isotope allow_failures Whether allow failures filtering step resamples number resamples run seed seed resampling","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/multi_qsip_wrapper_launcher.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for launching multi_qsip_wrapper() — multi_qsip_wrapper_launcher","title":"Internal function for launching multi_qsip_wrapper() — multi_qsip_wrapper_launcher","text":"Internal function launching multi_qsip_wrapper()","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/multi_qsip_wrapper_launcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for launching multi_qsip_wrapper() — multi_qsip_wrapper_launcher","text":"","code":"multi_qsip_wrapper_launcher(   group,   name,   qsip_data_object,   min_unlabeled_sources = 2,   min_labeled_sources = 2,   min_unlabeled_fractions = 2,   min_labeled_fractions = 2,   allow_failures = FALSE,   resamples = 1000,   seed = NULL )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/multi_qsip_wrapper_launcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function for launching multi_qsip_wrapper() — multi_qsip_wrapper_launcher","text":"group group dataframe name group name qsip_data_object qsip_data object min_unlabeled_sources minimum number sources unlabeled isotope min_labeled_sources minimum number sources labeled isotope min_unlabeled_fractions minimum number fractions unlabeled isotope min_labeled_fractions minimum number fractions labeled isotope allow_failures Whether allow failures filtering step resamples number resamples run seed seed resampling","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/n_resamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of resamples — n_resamples","title":"Number of resamples — n_resamples","text":"function returns number resamples performed data. return NULL data resampled.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/n_resamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of resamples — n_resamples","text":"","code":"n_resamples(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/n_resamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of resamples — n_resamples","text":"qsip_data_object qSIP_data object list objects","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/pivot_kbase_amplicon_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot KBase amplicon matrix — pivot_kbase_amplicon_matrix","title":"Pivot KBase amplicon matrix — pivot_kbase_amplicon_matrix","text":"Pivot KBase amplicon matrix","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/pivot_kbase_amplicon_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot KBase amplicon matrix — pivot_kbase_amplicon_matrix","text":"","code":"pivot_kbase_amplicon_matrix(amplicon)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/pivot_kbase_amplicon_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot KBase amplicon matrix — pivot_kbase_amplicon_matrix","text":"amplicon amplicon matrix KBase","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_EAF_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot EAF and confidence intervals — plot_EAF_values","title":"Plot EAF and confidence intervals — plot_EAF_values","text":"function plots observed EAF values feature dataset. features ordered observed EAF values. confidence intervals plotted error bars ribbons.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_EAF_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot EAF and confidence intervals — plot_EAF_values","text":"","code":"plot_EAF_values(   qsip_data_object,   confidence = 0.9,   success_ratio = 0.9,   top = Inf,   error = \"none\",   alpha = 0.3,   zero_line = TRUE,   title = NULL )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_EAF_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot EAF and confidence intervals — plot_EAF_values","text":"qsip_data_object (qsip_data) qsip_data object list qsip_data objects confidence (numeric) confidence level confidence interval success_ratio (numeric) ratio successful resamples total resamples top (numeric) number top features plot. Use Inf error (character) type error bars plot. Options 'none', 'bar', 'ribbon' alpha (numeric) transparency error bar/ribbon zero_line (logical) Add line EAF = 0 title (character) optional title plot","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_EAF_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot EAF and confidence intervals — plot_EAF_values","text":"Either single qsip object list named qsip objects can passed function. giving list qsip objects plot faceted list names. resampling step run default allow_failures = FALSE, points just colored generic blue. , resampling instead run allow_failures = TRUE, points colored based success ratio resamples. giving list qsip objects pass/fail color scheme applied qsip objects allow_failures = TRUE.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_density_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","title":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","text":"Assuming linear relationship gradient_position gradient_pos_density, function plot potential outliers using Cook's distance defined sensitivity. lower sensitivity, likely outliers flagged.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_density_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","text":"","code":"plot_density_outliers(sample_data, sensitivity = 4)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_density_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","text":"sample_data (qsip_sample_data qsip_data) qsip object sample data sensitivity (numeric, default: 4) sensitivity value, lower values sensitive outlier detection","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_density_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","text":"ggplot object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot qSIP feature data density curves — plot_feature_curves","title":"Plot qSIP feature data density curves — plot_feature_curves","text":"Plot qSIP feature data density curves","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot qSIP feature data density curves — plot_feature_curves","text":"","code":"plot_feature_curves(   qsip_data_object,   feature_ids,   source_mat_ids = NULL,   title = NULL )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot qSIP feature data density curves — plot_feature_curves","text":"qsip_data_object (qsip_data) qsip data object tube relative abundances feature_ids (string) Feature ids plotted facet source_mat_ids (string, defaults ) list source material ids title (string) optional title plot","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot qSIP feature data density curves — plot_feature_curves","text":"ggplot object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_resamplings.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the resampled EAFs for each feature — plot_feature_resamplings","title":"Plot the resampled EAFs for each feature — plot_feature_resamplings","text":"plot show results resampling procedure feature. resampling procedure run using run_resampling() function. plot show mean resampled EAF feature, confidence interval (default 90%) shown bar line (default line). area curve can also shown (default TRUE).","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_resamplings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the resampled EAFs for each feature — plot_feature_resamplings","text":"","code":"plot_feature_resamplings(   qsip_data_object,   feature_ids = NULL,   area = TRUE,   confidence = 0.9,   intervals = \"\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_resamplings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the resampled EAFs for each feature — plot_feature_resamplings","text":"qsip_data_object (qsip_data) qsip data object resampled feature_ids (character vector) vector feature ids filter area (boolean) Whether plot area curve (default: TRUE) confidence (numeric) confidence interval plot intervals (character) Whether plot confidence interval bar, line (default)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_resamplings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the resampled EAFs for each feature — plot_feature_resamplings","text":"ggplot object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_filter_gradient_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of filtering features — plot_filter_gradient_position","title":"Plot the results of filtering features — plot_filter_gradient_position","text":"running run_feature_filter() code, function produce two plot detailing consequences filtering. Plot shows retained removed features total tube relative abundance contribution, plot B shows retained removed features total count category. \"zero fractions\" shown plot B entirely missing given source_mat_id thus going retained matter run_filter_feature() parameters .","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_filter_gradient_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of filtering features — plot_filter_gradient_position","text":"","code":"plot_filter_gradient_position(   qsip_data_object,   return_type = \"combined\",   colors = NULL )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_filter_gradient_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of filtering features — plot_filter_gradient_position","text":"qsip_data_object (qsip_data) return_type (string, default: combined) Changes return type combined plot (combined), list individual plots (individual) list dataframes (dataframe) colors (strings) optional color palette","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_filter_gradient_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of filtering features — plot_filter_gradient_position","text":"Combined individual plots, raw dataframes","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_growth_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot growth values — plot_growth_values","title":"Plot growth values — plot_growth_values","text":"Plot growth values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_growth_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot growth values — plot_growth_values","text":"","code":"plot_growth_values(   qsip_data_object,   confidence = 0.9,   top = Inf,   error = \"none\",   alpha = 0.4,   type = \"rates\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_growth_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot growth values — plot_growth_values","text":"qsip_data_object (qsip_data) qsip data object confidence (numeric) confidence level confidence interval top (numeric) number top features plot. Use Inf error (character) type error bars plot. Options 'none', 'bar', 'ribbon' alpha (numeric) transparency error bar/ribbon type (character) type growth values plot. Options 'rates' \"copies","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_resampling_convergence.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot resampling convergence (under construction!) — plot_resampling_convergence","title":"Plot resampling convergence (under construction!) — plot_resampling_convergence","text":"Plot resampling convergence (construction!)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_resampling_convergence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot resampling convergence (under construction!) — plot_resampling_convergence","text":"","code":"plot_resampling_convergence(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_resampling_convergence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot resampling convergence (under construction!) — plot_resampling_convergence","text":"qsip_data_object (qsip_data) qsip data object resampled","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_sample_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot qSIP sample data density curves — plot_sample_curves","title":"Plot qSIP sample data density curves — plot_sample_curves","text":"Plot qSIP sample data density curves","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_sample_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot qSIP sample data density curves — plot_sample_curves","text":"","code":"plot_sample_curves(qsip_data, colors = NULL, title = NULL)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_sample_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot qSIP sample data density curves — plot_sample_curves","text":"qsip_data (qsip_data) qSIP object colors (character) named vector colors isotope (optional) title (character) optional title plot","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_sample_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot qSIP sample data density curves — plot_sample_curves","text":"ggplot object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_source_wads.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the source WADs by isotope — plot_source_wads","title":"Plot the source WADs by isotope — plot_source_wads","text":"Plot source WADs isotope","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_source_wads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the source WADs by isotope — plot_source_wads","text":"","code":"plot_source_wads(qsip_data, group = NULL, colors = NULL, title = NULL)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_source_wads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the source WADs by isotope — plot_source_wads","text":"qsip_data (qsip_data) qSIP object group (character) optional grouping parameter facet y x,y axes colors (character) optional override default color palette title (character) optional title plot","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_source_wads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the source WADs by isotope — plot_source_wads","text":"ggplot object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_successful_resamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","title":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","text":"function plot number successful resamples feature_id. value typically number resamples given run_resampling(), run_resampling() called allow_failures = TRUE number successful resamples might less number resamples given.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_successful_resamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","text":"","code":"plot_successful_resamples(   qsip_data_object,   labels = FALSE,   as_percentage = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_successful_resamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","text":"qsip_data_object (qsip_data) qsip data object resampled labels (logical) TRUE, counts labeled plot as_percentage (logical) TRUE, x axis percentage total number resamples","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_successful_resamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","text":"ggplot object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qSIP2-package.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP2: qSIP Analysis — qSIP2-package","title":"qSIP2: qSIP Analysis — qSIP2-package","text":"Package analyzing quantitative stable isotope probing data.","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qSIP2-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"qSIP2: qSIP Analysis — qSIP2-package","text":"Maintainer: Jeff Kimbrel kimbrel1@llnl.gov (ORCID)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP master data class — qsip_data","title":"qSIP master data class — qsip_data","text":"qsip_data object holds validated qSIP source, sample feature metadata, slots store subsequence qSIP2 analysis.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qSIP master data class — qsip_data","text":"","code":"qsip_data(source_data, sample_data, feature_data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qSIP master data class — qsip_data","text":"source_data (qsip_source_data) qSIP source data object sample_data (qsip_sample_data) qSIP sample data object feature_data (qsip_feature_data) qSIP feature data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"qSIP master data class — qsip_data","text":"validated qsip_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"qSIP master data class — qsip_data","text":"qsip_data() typical function, rather class constructor instantiates new qsip_data object. constructor takes qsip_source_data, qsip_sample_data qsip_feature_data input returns validated qsip_data object. qsip_data object holds source, sample feature data. also creates empty slots hold filtering results, resampling EAF values associated functions. reason, qsip_data object intended progressively overwritten new analysis results, new objects can created point analysis, necessary. example, study multiple comparison groups might combined one large qSIP_data object, split separate objects run_feature_filtering() step. Internally, creating original qSIP objects renames metadata columns standardized MISIP terminology. data.frame standardized names can extracted back qSIP_data using get_dataframe() method required type argument \"source\", \"sample\" \"feature\". optional original_headers argument can set TRUE return original column names.","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP feature table class — qsip_feature_data","title":"qSIP feature table class — qsip_feature_data","text":"qsip_feature_data object holds validated feature metadata.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qSIP feature table class — qsip_feature_data","text":"","code":"qsip_feature_data(data, feature_id = \"feature_id\", type = \"counts\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qSIP feature table class — qsip_feature_data","text":"data (dataframe) ASV/OTU table equivalent feature_id (string) Column name unique taxa IDs type (string, default: counts) type numerical data, either counts, coverage, normalized relative","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"qSIP feature table class — qsip_feature_data","text":"validated object qsip_feature_data type","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"qSIP feature table class — qsip_feature_data","text":"qsip_feature_data() typical function, rather class constructor instantiates new qsip_feature_data object. constructor takes data.frame input returns validated qsip_feature_data object. qsip_feature_data object used hold feature metadata, amplicon sequence variants (ASVs), operational taxonomic units (OTUs), metagenome-assembled genomes (MAGs), etc. data argument takes data.frame feature IDs column designated feature_id argument. row corresponds unique feature (amplicon, MAG, etc) subsequent row corresponds unique sample. type argument used designate type data data argument. likely counts amplicon data, coverage metagenome data (including normalizations like TPM). data relative abundances, type argument set relative. Overall, choice much affect results qSIP analysis, choosing accurate type help validation checks. Internally, qsip_feature_data renames metadata columns standardized MISIP terminology. data.frame standardized names can extracted back object using get_dataframe() method, optional original_headers argument can set TRUE return original column names. several validation checks run data data.frame: data argument must contain data.frame, including tibble feature_id argument must column name data.frame feature_id column must contain unique values per row type argument must one counts, coverage relative type argument counts default, case values data argument must integers type set relative values data argument must numeric values must sum 1 row type set coverage, values data argument must numeric type set normalized values assumed pre-normalized additional transformations done. values data argument must non-negative","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP sample data class — qsip_sample_data","title":"qSIP sample data class — qsip_sample_data","text":"qsip_sample_data object holds validated sample metadata.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qSIP sample data class — qsip_sample_data","text":"","code":"qsip_sample_data(   data,   sample_id = \"sample_id\",   source_mat_id = \"source_mat_id\",   gradient_position = \"gradient_position\",   gradient_pos_density = \"gradient_pos_density\",   gradient_pos_amt = \"gradient_pos_amt\",   gradient_pos_rel_amt = \"\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qSIP sample data class — qsip_sample_data","text":"data (dataframe) Metadata samples/fractions sample_id (string) unique sample ID source_mat_id (string) unique ID biological subject replicate gradient_position (string) Column name fraction position gradient_pos_density (string) Column name gradient density gradient_pos_amt (string) Column name total amount per fraction, either qPCR copies DNA gradient_pos_rel_amt (string) Column name relative fraction abundance compared total","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"qSIP sample data class — qsip_sample_data","text":"validated object qsip_sample_data type","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"qSIP sample data class — qsip_sample_data","text":"qsip_sample_data() typical function, rather class constructor instantiates new qsip_sample_data object. constructor takes data.frame input returns validated qsip_sample_data object. qSIP MISIP, \"sample\" post-fractionated material metadata pertaining fractionation process. Sample metadata contains information sample fractionation, sample ID, source material ID, gradient position, density, amount recovered (e.g. DNA concentration 16S copies), relative abundance fraction compared total. Ideally, gradient_pos_amt reported mass value DNA rather concentration. However, concentration reported, fraction_volume argument can used convert gradient_pos_amt concentration mass value. example, gradient_pos_amt reported ng/ul, fraction_volume reported 100 ul, gradient_pos_amt converted ng. Internally, qsip_sample_data renames metadata columns standardized MISIP terminology. data.frame standardized names can extracted back object using get_dataframe() method, optional original_headers argument can set TRUE return original column names. several validation checks done data.frame: data argument must contain data.frame, including tibble sample_id column must contain unique values per row gradient_position must container positive integers, -1 allowed designate sample \"bulk\" unfractionated","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP source data class — qsip_source_data","title":"qSIP source data class — qsip_source_data","text":"qsip_source_data object holds validated source material metadata.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qSIP source data class — qsip_source_data","text":"","code":"qsip_source_data(   data,   isotope = \"isotope\",   isotopolog = \"isotopolog\",   source_mat_id = \"source_mat_id\",   timepoint = \"NULL\",   total_abundance = \"NULL\",   volume = \"NULL\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qSIP source data class — qsip_source_data","text":"data (dataframe) Source metadata isotope (string) Isotope name isotopolog (string)  Isotopolog data source_mat_id (string) unique ID biological subject source timepoint (string) Timepoint data total_abundance (string) Total abundance data volume (string) Volume abundance data. Defaults 1, can ul volume abundance data given concentration","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"qSIP source data class — qsip_source_data","text":"validated qsip_source_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"qSIP source data class — qsip_source_data","text":"qsip_source_data() typical function, rather class constructor instantiates new qsip_source_data object. constructor takes data.frame input returns validated qsip_source_data object. qSIP MISIP, \"source material\" original biological specimen DNA extracted . soil sample, plant, mouse, etc. pre-fractionated metadata, post-fractionation metadata goes qsip_sample_data object. Several validation checks run input data: data argument must data.frame, including tibble isotope, isotopolog, source_mat_id arguments must column names data.frame source_mat_id column must unique isotope column must contain valid isotope names. \"Valid\" means must one types qSIP2 package equations , namely 12C/13C, 14N/15N 16O/18O. non-isotope names also valid, including \"bulk\", \"unfractionated\" \"T0\". Internally, qsip_source_data renames metadata columns standardized MISIP terminology. data.frame standardized names can extracted back object using get_dataframe() method, optional original_headers argument can set TRUE return original column names. One column metadata required although used qSIP2 isotopolog column. column required capture complete metadata compliant MISIP standards. However, running experiments multiple isotopologs column can used generate correct comparison groups using show_comparison_groups() function.","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove isotopolog_label from ","title":"Remove isotopolog_label from ","text":"convert data isotope isotopolog_label one isotope .","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove isotopolog_label from ","text":"","code":"remove_isotopolog_label(data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove isotopolog_label from ","text":"data (dataframe) Sample metadata","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove isotopolog_label from ","text":"dataframe isotopolog_label column removed isotope column modified","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove isotopolog label if needed — remove_isotopolog_label_check","title":"Remove isotopolog label if needed — remove_isotopolog_label_check","text":"qSIP2 functions expect non-MISIP data. running qSIP2 within KBase, function verify/update data non-MISIPified.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove isotopolog label if needed — remove_isotopolog_label_check","text":"","code":"remove_isotopolog_label_check(df, isotope = \"isotope\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove isotopolog label if needed — remove_isotopolog_label_check","text":"df Sample data isotope Column name isotope data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/resample_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed used in resampling — resample_seed","title":"Seed used in resampling — resample_seed","text":"Returns seed used resampling step, NULL specific seed given.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/resample_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed used in resampling — resample_seed","text":"","code":"resample_seed(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/resample_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed used in resampling — resample_seed","text":"qsip_data_object qSIP_data list qSIP_data objects.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_EAF_calculations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate EAF values — run_EAF_calculations","title":"Calculate EAF values — run_EAF_calculations","text":"last main workhorse function qSIP analysis generates important values (Z, G, M, M_labeledmax, M_labeled EAF) observed data well resampled data.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_EAF_calculations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate EAF values — run_EAF_calculations","text":"","code":"run_EAF_calculations(qsip_data_object, gc_method = \"MM\", propO = 1)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_EAF_calculations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate EAF values — run_EAF_calculations","text":"qsip_data_object (qsip_data) qsip_data_object resample information gc_method (string) method use calculating GC content WAD propO (numeric) proportion heavy isotope labeled DNA. used 18O.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_EAF_calculations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate EAF values — run_EAF_calculations","text":"Returns updated qsip_data_object final EAF values @EAF slot.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_comparison_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Run comparison groups — run_comparison_groups","title":"Run comparison groups — run_comparison_groups","text":"function takes dataframe groups parameters runs entire qSIP2 EAF workflow group.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_comparison_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run comparison groups — run_comparison_groups","text":"","code":"run_comparison_groups(   groups,   qsip_data_object,   allow_failures = NULL,   seed = NULL,   resamples = NULL )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_comparison_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run comparison groups — run_comparison_groups","text":"groups dataframe containing group, unlabeled, labeled, optional columns qsip_data_object qsip_data object allow_failures Whether allow failures filtering step. Sets groups. seed seed resampling. Sets groups. resamples number resamples run. Sets groups.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_comparison_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run comparison groups — run_comparison_groups","text":"heart function group dataframe, contain following columns: group (required): unique identifier group. can short, descriptive string describing group unlabeled (required): comma-separated list source_mat_ids unlabeled isotope. Optionally, can use terms \"unlabeled\" \"12C\" use source_mat_ids isotope designation labeled (required): comma-separated list source_mat_ids labeled isotope Additionally, optional columns can included dataframe set per group parameters: min_unlabeled_sources: minimum number unlabeled sources required fraction min_labeled_sources: minimum number labeled sources required fraction min_unlabeled_fractions: minimum number unlabeled fractions required source min_labeled_fractions: minimum number labeled fractions required source allow_failures: whether allow failures filtering step resamples: number resamples run seed: seed resampling last three list can also added optional parameters, override values groups dataframe.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter features in a qSIP data object — run_feature_filter","title":"Filter features in a qSIP data object — run_feature_filter","text":"Filters feature feature table qsip_data object presence minimum number fractions source_mat_ids.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter features in a qSIP data object — run_feature_filter","text":"","code":"run_feature_filter(   qsip_data_object,   group = NULL,   unlabeled_source_mat_ids,   labeled_source_mat_ids,   min_unlabeled_sources = 2,   min_labeled_sources = 2,   min_unlabeled_fractions = 2,   min_labeled_fractions = 2,   quiet = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter features in a qSIP data object — run_feature_filter","text":"qsip_data_object (qsip_data) object qsip_data class group (string) optional name assign filtered group unlabeled_source_mat_ids (string strings(s)) list unlabeled source_mat_ids filter labeled_source_mat_ids (string strings(s)) list labeled source_mat_ids filter min_unlabeled_sources (integer, default: 2) Minimum number unlabeled source_mat_ids feature must found . min_labeled_sources (integer, default: 2) Minimum number labeled source_mat_ids feature must found . min_unlabeled_fractions (integer, default: 2) Minimum number fractions feature must found present unlabeled source_mat_id min_labeled_fractions (integer, default: 2) Minimum number fractions feature must found present labeled source_mat_id quiet (logical, default: FALSE) Suppress messages","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter features in a qSIP data object — run_feature_filter","text":"updated qsip_data object filtered feature dataframe @filtered_feature_data slot intermediate data @filter_results slot plotting.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter features in a qSIP data object — run_feature_filter","text":"Filtering first done fractions, source_mat_ids. example, take feature found three source_mat_ids 3, 5 9 fractions. set min_fractions = 5 min_sources = 3 feature survive filtering although found three source_mat_ids, one less minimum fraction count therefore considered found source_mat_id. feature table filtered retain feature_ids passing filter, keep sample_ids correspond given source_mat_ids. filtered table stored @filtered_feature_data slot, values table raw initial values relative abundances per fraction per tube. values originally calculated qsip_data object creation values features stored @tube_rel_abundance slot.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_growth_calculations.html","id":null,"dir":"Reference","previous_headings":"","what":"Run growth calculations — run_growth_calculations","title":"Run growth calculations — run_growth_calculations","text":"Run growth calculations","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_growth_calculations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run growth calculations — run_growth_calculations","text":"","code":"run_growth_calculations(   qsip_data_object,   N_total_it,   growth_model = \"exponential\",   timepoint = \"timepoint\",   correct_copy_numbers = \"filter\",   correct_EAF = \"filter\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_growth_calculations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run growth calculations — run_growth_calculations","text":"qsip_data_object (qsip_data) object qsip_data class N_total_it (data.frame) data frame time zero totals get_N_total_it() growth_model (character, default: exponential) growth model use. Must either \"exponential\" \"linear\" timepoint (character) name timepoint column source data correct_copy_numbers (character, default: filter) copy numbers logical (e.g. < 0), filtered adjusted 0? correct_EAF (character, default: filter) EAF values logical (e.g. <0 >1), filtered adjusted 0 1?","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample WAD values — run_resampling","title":"Resample WAD values — run_resampling","text":"Takes filtered WAD dataframe resamples x times","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample WAD values — run_resampling","text":"","code":"run_resampling(   qsip_data_object,   resamples = 1000,   with_seed = NULL,   allow_failures = FALSE,   progress = TRUE,   quiet = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample WAD values — run_resampling","text":"qsip_data_object (qsip_data) qsip data object filtered resamples (integer) number resamples/bootstraps run with_seed (integer) optional seed reproducibility allow_failures (boolean) Option allow resampling failures. TRUE, function continue resample even features fail. FALSE, function stop features fail. progress (boolean) Option show progress bar resampling step quiet (boolean) Option suppress messages","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample WAD values — run_resampling","text":"new qsip_data object @resamples slot populated resamples wad values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resample WAD values — run_resampling","text":"function returns list resampled dataframes x length labeled unlabeled sources.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_comparison_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Show comparison groups — show_comparison_groups","title":"Show comparison groups — show_comparison_groups","text":"Generates table ids grouped columns isotope, rows given treatments.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_comparison_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show comparison groups — show_comparison_groups","text":"","code":"show_comparison_groups(   source_data = NULL,   group = NULL,   isotope = \"isotope\",   source_mat_id = \"source_mat_id\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_comparison_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show comparison groups — show_comparison_groups","text":"source_data (dataframe, qsip_source_data qsip_data) Sample metadata group (string) Treatment value values isotope (string, default: isotope) Column name isotope data source_mat_id (string, default: source_mat_id) Column name source_mat_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_comparison_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show comparison groups — show_comparison_groups","text":"dataframe id grouped different group treatments isotopes","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_unshared_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Show missing source_mat_ids and sample_ids — show_unshared_ids","title":"Show missing source_mat_ids and sample_ids — show_unshared_ids","text":"function identifies missing source_mat_ids sample_ids source, sample, feature data objects.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_unshared_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show missing source_mat_ids and sample_ids — show_unshared_ids","text":"","code":"show_unshared_ids(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_unshared_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show missing source_mat_ids and sample_ids — show_unshared_ids","text":"qsip_data_object (qsip_data) qSIP data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_unshared_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show missing source_mat_ids and sample_ids — show_unshared_ids","text":"message unique IDs per category","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/source_results_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter features by source message formatting (internal) — source_results_message","title":"Filter features by source message formatting (internal) — source_results_message","text":"Filter features source message formatting (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/source_results_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter features by source message formatting (internal) — source_results_message","text":"","code":"source_results_message(by_source)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/source_results_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter features by source message formatting (internal) — source_results_message","text":"by_source by_source dataframe run_feature_filter","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the observed and resampled EAF values — summarize_EAF_values","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"Reports observed EAF value (observed_EAF) well mean resampled values (mean_resampled_EAF) lower upper confidence interval given confidence limit.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"","code":"summarize_EAF_values(qsip_data_object, confidence = 0.9, quiet = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"qsip_data_object (qsip_data) qsip_data object list qsip_data objects confidence (numeric, default: 0.9) confidence level confidence interval quiet (logical, default: FALSE) Suppress messages","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"dataframe summarized observed resampled EAF values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"confidence interval uses resampling method returns quantile values resampled data. confidence = 0.9 (default) function returns 5% 95% quantiles (representing 90% resampling) lower upper results.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to summarize EAF values — summarize_EAF_values_internal","title":"Internal function to summarize EAF values — summarize_EAF_values_internal","text":"Internal function summarize EAF values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to summarize EAF values — summarize_EAF_values_internal","text":"","code":"summarize_EAF_values_internal(qsip_data_object, confidence = 0.9)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to summarize EAF values — summarize_EAF_values_internal","text":"qsip_data_object (qsip_data) qsip_data object confidence (numeric, default: 0.9) confidence level confidence interval Called summarize_EAF_values calculate resampled EAF values.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_growth_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize growth values — summarize_growth_values","title":"Summarize growth values — summarize_growth_values","text":"Summarize growth values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_growth_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize growth values — summarize_growth_values","text":"","code":"summarize_growth_values(qsip_data_object, confidence = 0.9, quiet = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_growth_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize growth values — summarize_growth_values","text":"qsip_data_object qsip_data object confidence (numeric, default: 0.9) confidence level growth values quiet (logical, default: FALSE) Suppress messages","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of a feature abundance table (internal) — validate_abundances","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"validation function internal function check validity feature abundance table.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"","code":"validate_abundances(data, feature_id, type)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"data (dataframe) ASV/OTU table feature_id (string) Column name feature IDs type (string) counts requires integers, coverage relative can take positive numeric","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"Returns NULL values valid, printed error","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"Rows contain unique taxa ids column designated id argument. column name unique sample name. Validity checking includes making sure data numeric (except feature IDs), numbers integers (type = \"counts\"), numbers negative.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_pos_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of density values (internal) — validate_gradient_pos_density","title":"Check the validity of density values (internal) — validate_gradient_pos_density","text":"Check validity density values (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_pos_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of density values (internal) — validate_gradient_pos_density","text":"","code":"validate_gradient_pos_density(df, low = 1.55, high = 1.8)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_pos_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of density values (internal) — validate_gradient_pos_density","text":"df (dataframe) two-column dataframe density positions density values low (numeric, default: 1.55) low limit valid density values high (numeric, default: 1.8) high limit valid density values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_pos_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of density values (internal) — validate_gradient_pos_density","text":"Returns NULL density values valid, printed error","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of gradient position values (internal) — validate_gradient_position","title":"Check the validity of gradient position values (internal) — validate_gradient_position","text":"Valid gradient positions integers. value can -1 represent \"bulk\" non-qSIP samples.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of gradient position values (internal) — validate_gradient_position","text":"","code":"validate_gradient_position(gradient_position)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of gradient position values (internal) — validate_gradient_position","text":"gradient_position (string strings) Gradient position value values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of gradient position values (internal) — validate_gradient_position","text":"NULL gradient position values valid, printed error","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of an isotope string (internal) — validate_isotopes","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"Often \"bulk\" designation found column, can optionally removed validation checks","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"","code":"validate_isotopes(   isotope,   isotope_list = c(\"12C\", \"13C\", \"14N\", \"15N\", \"16O\", \"18O\"),   unfractionated_terms = c(\"bulk\", \"unfractionated\", \"T0\", \"time0\", \"Time0\") )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"isotope (string(s)) Isotope value values isotope_list (strings, default: c(\"12C\", \"13C\", \"14N\", \"15N\", \"16O\", \"18O\")) Isotopes check unfractionated_terms (strings) Terms ignore checking isotope values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"Returns NULL isotope strings valid, printed error","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"isotope_list may change isotopolog_label stays thing. \"labeled\" isotopes allowed.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_source_isotope.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","title":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","text":"Currently used run_feature_filter() make sure user given labeled unlabeled source_mat_ids incorrect respective source_data.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_source_isotope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","text":"","code":"validate_source_isotope(qsip_data_object, source_mat_ids, isotope_list)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_source_isotope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","text":"qsip_data_object qsip_data object source_mat_ids character vector source_mat_ids isotope_list character vector isotopes check ","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_source_isotope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","text":"TRUE (match) FALSE (match)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_standard_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that a data.frame doesn't already contained standard column names (internal) — validate_standard_names","title":"Validate that a data.frame doesn't already contained standard column names (internal) — validate_standard_names","text":"Currently used instantiating one three \"primal\" objects. give error user tries pass non-standard column name, existing column name already uses standard name.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_standard_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that a data.frame doesn't already contained standard column names (internal) — validate_standard_names","text":"","code":"validate_standard_names(data, name, type)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_standard_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that a data.frame doesn't already contained standard column names (internal) — validate_standard_names","text":"data data.frame name column name selected user type type data (source, sample, feature)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-016","dir":"Changelog","previous_headings":"","what":"qSIP2 0.16","title":"qSIP2 0.16","text":"vignette(\"growth\") vignette(\"multiple_objects\") vignette(\"qSIP_workflow\") vignette(\"source_data\") vignette(\"sample_data\") vignette(\"feature_data\") vignette(\"resampling\") Added light/dark switch website documentation Added optional title argument change title plot `plot_ Switched using testthat fixtures Added get_filtered_feature_summary() see filtering fate specified feature_id Clean devtools::check() errors, warnings notes.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-015","dir":"Changelog","previous_headings":"","what":"qSIP2 0.15","title":"qSIP2 0.15","text":"Introducing functions work multiple qSIP2 objects Added run_comparison_groups() launch multiple qSIP2 EAF workflows Updated summarize_EAF_values() plot_EAF_values() functions work multiple qSIP2 objects. Plotting puts group ’s facet, facet sorted individually EAF values. top argument also works group independently, confidence value shared across groups. Less strict isotope validation allow comparing mismatched labeled unlabeled sources. example, can compare 18O labeled 12C unlabeled sources.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-014","dir":"Changelog","previous_headings":"","what":"qSIP2 0.14","title":"qSIP2 0.14","text":"Added grouping variable get_N_total_it() summarize metadata variables Fixed bug N_total_it just unlabeled, labeled + unlabeled Added linear growth model addition existing exponential model. Exponential still default. Renamed unlabeled labeled N_light_it N_heavy_it, respectively Growth calculations finalized recalculating N_light_it, qSIP2 now recalculates N_heavy_it keep N_total_it constant","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-013","dir":"Changelog","previous_headings":"","what":"qSIP2 0.13","title":"qSIP2 0.13","text":"Beta functions growth calculations Added time total_abundance qsip_source_data() required arguments want growth calculations Added calculate_time_zero_abundance() summarize time zero abundance feature Added run_growth_calculations() calculate growth (r), birth (b) death (d) rates total abundances EAF values Added summarize_growth_values() summarize r, b d rates Added plot_growth_rates() visualize growth r, b d rates Two different growth plot types based either rates N copies timepoints (time zero time t) now reported growth calculations features make comparing rates timepoints time zero easier Added group argument run_feature_filter() embed grouping name qsip object Ability adjust total abundance copies using per-row volume adjustment source data Moved Koch, 2018 equations functions Resampling now calculates r_net N_total_it values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-012","dir":"Changelog","previous_headings":"","what":"qSIP2 0.12","title":"qSIP2 0.12","text":"Beginning work KBase functionality Added additional columns summarize_EAF_values() output updated vignettes plot_EAF_values() function added Added new parameter (gc_method) change GC calculation method run_EAF_calculations(). “MM” still default. Added ability add/remove zero_line plot_EAF_values()","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-011","dir":"Changelog","previous_headings":"","what":"qSIP2 0.11","title":"qSIP2 0.11","text":"Fixed run_resampling() get confused using sample names integers. Fixed example_source_df example_sample_df remove built validation errors (missing isotoplog source data, fractions characters sample data). dataframes now valid objects package Added validation checks existing standard names dataframes. example, trying use data.frame source data already source_mat_id column, designate different column source_mat_id, throw error. prevent column name collisions potential unintended consequences. Added internal function validate_standard_names() check existing standard names dataframes. Added alpha function plot_resampling_convergence() follow CoV resamplings converge stable value Added new vignette(\"resampling\") details resampling procedure Fixed run_EAF_calculations() work allow_failures logic Add plot_feature_resamplings() plot resampling results single list feature_ids Introduced ability keep successful resampling attempts, discard failures. keeps run_resampling() failing sample count low, result feature_ids less expected number resamples. controlled allow_failures argument run_resampling(). Two functions added inspect results resampling: get_resample_counts() plot_successful_resamples().","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-010","dir":"Changelog","previous_headings":"","what":"qSIP2 0.10","title":"qSIP2 0.10","text":"Added infer_source_data() function infer source data sample data data frame Update documentation internal functions Fixed validate_gradient_pos_density() (tests) fail bulk data gradient_position -1 (#8). Fixed validate_isotopes() accept standard unfractionated terms like “bulk” “time0” bypass isotope validation. plot_sample_curves() plot_source_wads() updated ignore unfractionated samples/sources Removed requirement gradient_pos_rel_amt column imported sample dataframe. one can still pass column name. don’t, run add_gradient_pos_rel_amt() silently using gradient_pos_amt column, provide message . Updated vignette(\"feature_data\") Documentation get_dataframe() Started NEWS.md file keep track changes Updated plot_sample_curves() plot_source_wads() use existing WAD values pre-calculated making qsip_data object. means now require qsip_data object input longer accept sample source object. main workflow vignette updated reflect changes. Renamed data() get_dataframe() match naming scheme functions.","code":""}]
