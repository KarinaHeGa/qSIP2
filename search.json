[{"path":"https://jeffkimbrel.github.io/qSIP2/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 qSIP2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/controlled_vocab.html","id":"terminology","dir":"Articles","previous_headings":"","what":"Terminology","title":"Controlled vocabulary for qSIP data","text":"source_mat_id also used link sample metadata source metadata term derived MISIP standards. Previous synonyms qSIP include “rep” “tube” qSIP, choices limited one 12C, 13C, 14N, 15N, 16O 18O term also required MISIP field term also required MISIP field qSIP doesn’t strictly adhere MISIP standards, string “glucose” suffice","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"feature-counts-and-metadata","dir":"Articles","previous_headings":"","what":"Feature Counts and Metadata","title":"Working with Feature Data","text":"feature table required file qSIP2 pipeline. typical ASV/OTU table individual taxa rows, sample names columns. table populated raw sequencing counts amplicon workflow, proxy abundance (like mean/median depth coverage) working MAGs data types.","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"feature-ids-as-a-column","dir":"Articles","previous_headings":"Preparing the Feature Data","what":"Feature ids as a column","title":"Working with Feature Data","text":"“feature” refers names individual sequenced units (amplicons, taxa, vOTUs, MAGs, etc.) feature data dataframe column designated feature ids. dataframe rownames can convert column using tibble::rownames_to_column() function. example:","code":"df_with_rownames <- data.frame(   row.names = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(1, 2, 3),   sample2 = c(4, 5, 6) )  # data has rownames rownames(df_with_rownames) #> [1] \"feature1\" \"feature2\" \"feature3\" df_with_rownames #>          sample1 sample2 #> feature1       1       4 #> feature2       2       5 #> feature3       3       6  # convert rownames to a column df_without_rownames <- df_with_rownames |>   tibble::rownames_to_column(var = \"feature_id\")  # now the features are in their own column df_without_rownames #>   feature_id sample1 sample2 #> 1   feature1       1       4 #> 2   feature2       2       5 #> 3   feature3       3       6"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"abundance-information","dir":"Articles","previous_headings":"Preparing the Feature Data","what":"Abundance Information","title":"Working with Feature Data","text":"row corresponds feature, abundance feature certain sample lives column sample name column header. abundance values can one several types, data subject different validation requirements based type data. currently accepted types counts, coverage, normalized, relative. counts default used cases giving raw sequencing counts. , data expected integers equal greater 0 coverage designed use MAGs data types using proxy abundance like mean/median depth coverage. , data expected numeric values equal greater 0. normalized special case already pre-normalized counts using internal spike-similar. relative situations might lost original integer count data relative abundance. using option columns expects fractional abundances (rather percentages) column must sum 1 less.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"making-a-qsip_feature_data-object","dir":"Articles","previous_headings":"","what":"Making a qSIP_feature_data object","title":"Working with Feature Data","text":"qsip_feature_data() function creates qsip_feature_data object. qSIP_feature_data object holds validated abundance data features. can made giving already made dataframe, modifying dataframe piping directly function. can also create pass tibble instead data.frame.","code":"# option 1 df <- data.frame(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(1, 2, 3),   sample2 = c(4, 5, 6) ) qf1 <- qsip_feature_data(df)  # option 2 qf2 <- data.frame(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(1, 2, 3),   sample2 = c(4, 5, 6) ) |>   qsip_feature_data() tibble(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(1, 2, 3),   sample2 = c(4, 5, 6) ) |>   qsip_feature_data()"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"specifying-parameters","dir":"Articles","previous_headings":"Making a qSIP_feature_data object","what":"Specifying Parameters","title":"Working with Feature Data","text":"functions worked without parameters created data.frame matched defaults. feature ids column different name, must pass column name using feature_id argument.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"feature_id","dir":"Articles","previous_headings":"Making a qSIP_feature_data object > Specifying Parameters","what":"feature_id","title":"Working with Feature Data","text":"","code":"qf3 <- tibble(   ASV = c(\"ASV1\", \"ASV2\", \"ASV3\"),   sample1 = c(1, 2, 3),   sample2 = c(4, 5, 6) ) |>   qsip_feature_data(feature_id = \"ASV\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"type","dir":"Articles","previous_headings":"Making a qSIP_feature_data object > Specifying Parameters","what":"type","title":"Working with Feature Data","text":"validation checks depend chosen type (explained ). try pass values don’t match type specified, get error. example, fractional values allowed type default counts. allowed type = \"coverage\".","code":"tibble(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(0.1, 0.2, 0.3),   sample2 = c(0.4, 0.5, 0.6) ) |>   qsip_feature_data() #> Error: Some data are not integers qf4 <- tibble(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(0.1, 0.2, 0.3),   sample2 = c(0.4, 0.5, 0.6) ) |>   qsip_feature_data(type = \"coverage\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"object-structure","dir":"Articles","previous_headings":"Making a qSIP_feature_data object","what":"Object Structure","title":"Working with Feature Data","text":"Interacting qsip_feature_object meant done qSIP2 functions rather working object directly. However, might useful know structure object. Data stored slots accessible @ operator. example, see arguments given creation object: special method return original dataframe. theory, parameters can overwritten, recommended. , undergo validations may fail.","code":"qf1@type #> [1] \"counts\" get_dataframe(qf1) #>   feature_id sample1 sample2 #> 1   feature1       1       4 #> 2   feature2       2       5 #> 3   feature3       3       6 qf1@type <- \"relative\" #> Error: Some columns have a total relative abundance sum greater than 1"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"na-values","dir":"Articles","previous_headings":"Special Considerations","what":"NA Values","title":"Working with Feature Data","text":"NA values abundance table, get error trying make feature object. cases value NA probably means abundance 0, best practice convert prior creating object mutate call across function tidyr package.","code":"qf5 <- data.frame(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   sample1 = c(1, 2, NA),   sample2 = c(4, 5, 6) ) |>   mutate(across(everything(), ~ replace_na(.x, 0))) |>   qsip_feature_data()"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/feature_data.html","id":"taxonomy-or-other-metadata","dir":"Articles","previous_headings":"Special Considerations","what":"Taxonomy or other metadata","title":"Working with Feature Data","text":"metadata features, taxonomy table, can add add_taxa() function. Right now function still development requirements metadata can included.","code":"taxonomy <- data.frame(   feature_id = c(\"feature1\", \"feature2\", \"feature3\"),   genus = c(\"Marinobacter\", \"Devosia\", \"Pseudomonas\"),   species = c(\"adhaerens\", \"insulae\", \"syringae\") )  qf1_with_taxonomy <- add_taxonomy(qf1, taxonomy, feature_id = \"feature_id\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Standard qSIP Workflow","text":"complete quantitative stable isotope probing (qSIP) workflow using qSIP2 package starts three input files ends calculated excess atom fraction (EAF) values along ton intermediate data. vignette high-level walk major steps links specific vignettes detail appropriate.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"the-input-files","dir":"Articles","previous_headings":"","what":"The Input Files","title":"Standard qSIP Workflow","text":"Preparing formatting input files often tedious part analysis. goal rigid (opinionated) requirements imposed qSIP2 hopefully streamline creation files, automated validation checks can remove many common sources error confusion.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"source-data","dir":"Articles","previous_headings":"The Input Files","what":"Source Data","title":"Standard qSIP Workflow","text":"source data highest level metadata row corresponding original experimental source material object. example source dataframe included qSIP2 package called example_source_df. required columns valid source data including unique ID, measure quantitative abundance source material (either total DNA qPCR copies), isotope isotopolog designation substrate label. dataframe ready, next step convert qsip_source_data object. one main qSIP2 objects hold validate data. object modifies column names standard names supplied function. See vignette(\"source_data\") details.","code":"source_object <- qsip_source_data(example_source_df,   isotope = \"Isotope\",   isotopolog = \"isotopolog\",   source_mat_id = \"source\" )  class(source_object) #> [1] \"qsip_source_data\" \"S7_object\" colnames(example_source_df) #> [1] \"source\"             \"total_copies_per_g\" \"total_dna\"          #> [4] \"Isotope\"            \"Moisture\"           \"isotopolog\" colnames(source_object@data) #> [1] \"isotope\"            \"isotopolog\"         \"source_mat_id\"      #> [4] \"total_copies_per_g\" \"total_dna\"          \"Moisture\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"sample-data","dir":"Articles","previous_headings":"The Input Files","what":"Sample Data","title":"Standard qSIP Workflow","text":"sample metadata next level detail one row fraction, one row set fastq files sequenced. , several necessary columns valid sample data, including unique sample ID, source came , fraction ID, fraction density measure abundance fraction (total DNA qPCR copy number). additional column can derived percent abundance total sample found fractions. add_gradient_pos_rel_amt() function can help calculate dividing fraction abundance total abundance source putting gradient_pos_rel_amt column. , make qSIP2 object data, time qsip_sample_data object. See vignette(\"sample_data\") details relevant visualizations.","code":"sample_df <- example_sample_df |>   add_gradient_pos_rel_amt(source_mat_id = \"source\", amt = \"avg_16S_g_soil\") sample_object <- qsip_sample_data(sample_df,   sample_id = \"sample\",   source_mat_id = \"source\",   gradient_position = \"Fraction\",   gradient_pos_density = \"density_g_ml\",   gradient_pos_amt = \"avg_16S_g_soil\",   gradient_pos_rel_amt = \"gradient_pos_rel_amt\" )  class(sample_object) #> [1] \"qsip_sample_data\" \"S7_object\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"feature-data","dir":"Articles","previous_headings":"The Input Files","what":"Feature Data","title":"Standard qSIP Workflow","text":"Finally, last three necessary input files feature abundance table, aka “OTU table” “ASV table”. format dataframe unique feature IDs first column, additional column sample. row contains whole number (non-normalized) counts feature sample. now, validation step defaults requiring values positive integers, type options include coverage (working MAGs metagenomes) relative already relative abundances. See vignette(\"feature_data\") details relevant visualizations.","code":"example_feature_df[1:6] |>   head() |>   gt_func(title = \"First bit of `example_feature_df`\") feature_object <- qsip_feature_data(example_feature_df,   feature_id = \"ASV\" )  class(feature_object) #> [1] \"qsip_feature_data\" \"S7_object\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"the-qsip_data-object","dir":"Articles","previous_headings":"","what":"The qsip_data Object","title":"Standard qSIP Workflow","text":"qsip_data class main workhorse object qSIP2 package. built validated versions three previous objects, meant self-contained object necessary information analysis. design input workflow functions, well output. reason, can feel safe overwriting object new analysis work, can create new object step prefer. function report source_mat_ids shared source sample data, sample_ids shared sample feature data. reports unshared ids, can access show_unshared_ids(qsip_object), note just warning stop creation qSIP object. Behind scenes, creation object also runs calculations, particularly getting weighted-average density (WAD) feature source, also tube relative abundance feature. , certain visualizations can made.","code":"qsip_object <- qsip_data(   source_data = source_object,   sample_data = sample_object,   feature_data = feature_object ) #> There are 15 source_mat_ids, and they are all shared between the source and sample objects #> There are 284 sample_ids, and they are all shared between the sample and feature objects class(qsip_object) #> [1] \"qsip_data\" \"S7_object\" plot_source_wads(qsip_object, group = \"Moisture\") plot_sample_curves(qsip_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"main-workflow","dir":"Articles","previous_headings":"","what":"Main Workflow","title":"Standard qSIP Workflow","text":"Now validated qsip_data object, can start main workflow consisting comparison grouping, filtering, resampling finally calculating EAF values.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"comparison-grouping","dir":"Articles","previous_headings":"Main Workflow","what":"Comparison Grouping","title":"Standard qSIP Workflow","text":"qsip_data object likely contains data, may want run comparisons certain subsets. show_comparison_groups() function attempts identify suggest sources may want compare. group argument important define rows thinks constitute comparison. isotope argument defines labeled unlabeled values comparisons. can complex, particularly one isotopolog, details made available future another vignette. work “Normal” moisture groups likely want use S149, S150, S151 S152 unlabeled compare S178, S179 S180 labeled. Sometimes may also want compare specific labeled samples group unlabeled. qSIP2 package convenient way get using get_all_by_isotope() function.","code":"show_comparison_groups(qsip_object,   group = \"Moisture\",   isotope = \"isotope\",   source_mat_id = \"source_mat_id\" ) get_all_by_isotope(qsip_object, \"12C\") #> [1] \"S149\" \"S150\" \"S151\" \"S152\" \"S161\" \"S162\" \"S163\" \"S164\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"filter-features","dir":"Articles","previous_headings":"Main Workflow","what":"Filter Features","title":"Standard qSIP Workflow","text":"Rather filter front, might make sense run comparison specific filtering presence requirements just sources comparing. run_feature_filter() function takes different set fraction source requirements labeled unlabeled data, allowing precisely tailor filtering results. , can see rather strict filtering removed 64 features dataset. can visualize filtering results per-source basis.  Although large number features removed, can tell 64 remained actually still make large proportion total abundance sample. , retained features (blue) make ~80-85% total data, removed data (orange) remaining ~15-20%. B, can see surprisingly large number features found 0 times many sources (gray) therefore never present regardless filtering choices. although ~100-200 features passed filtering requirements (blue), requirement min_unlabeled_sources = 6 min_labeled_sources = 3 means features present many blue slices retained, leaving 64 total. Let’s comparison drought samples. , can see rather strict filtering removed 64 features dataset. can visualize filtering results per-source basis.","code":"qsip_normal <- run_feature_filter(qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S178\", \"S179\", \"S180\"),   min_unlabeled_sources = 6,   min_labeled_sources = 3,   min_unlabeled_fractions = 6,   min_labeled_fractions = 6 ) #> There are initially 2030 unique feature_ids #> 1705 of these have abundance in at least one fraction of one source_mat_id #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by fraction... #> 1519 unlabeled and 1417 labeled feature_ids were found in zero fractions in at least one source_mat_id #> 1440 unlabeled and 830 labeled feature_ids were found in too few fractions in at least one source_mat_id #> 299 unlabeled and 209 labeled feature_ids passed the fraction filter #> In total, 346 unique feature_ids passed the fraction filtering requirements... #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by source... #> 47 unlabeled and 137 labeled feature_ids failed the source filter because they were found in zero sources #> 196 unlabeled and 127 labeled feature_ids failed the source filter because they were found in too few sources #> 103 unlabeled and 82 labeled feature_ids passed the source filter #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> In total, 64 unique feature_ids passed all fraction and source filtering requirements plot_filter_gradient_position(qsip_normal) qsip_drought <- run_feature_filter(qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S200\", \"S201\", \"S202\", \"S203\"),   min_unlabeled_sources = 6,   min_labeled_sources = 3,   min_unlabeled_fractions = 6,   min_labeled_fractions = 6 ) #> There are initially 2030 unique feature_ids #> 1877 of these have abundance in at least one fraction of one source_mat_id #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by fraction... #> 1691 unlabeled and 1558 labeled feature_ids were found in zero fractions in at least one source_mat_id #> 1440 unlabeled and 1212 labeled feature_ids were found in too few fractions in at least one source_mat_id #> 299 unlabeled and 285 labeled feature_ids passed the fraction filter #> In total, 367 unique feature_ids passed the fraction filtering requirements... #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> Filtering feature_ids by source... #> 68 unlabeled and 82 labeled feature_ids failed the source filter because they were found in zero sources #> 196 unlabeled and 171 labeled feature_ids failed the source filter because they were found in too few sources #> 103 unlabeled and 114 labeled feature_ids passed the source filter #> =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ #> In total, 89 unique feature_ids passed all fraction and source filtering requirements plot_filter_gradient_position(qsip_drought)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"resampling","dir":"Articles","previous_headings":"Main Workflow","what":"Resampling","title":"Standard qSIP Workflow","text":"order calculate confidence interval EAF values, first need run resampling/bootstrapping procedure WAD values. step requires random sampling good practice set “seed”. Rather outside function, can pass seed argument. leave blank, generate random seed. seed generate results time run resampling process.","code":"qsip_normal <- run_resampling(qsip_normal,   resamples = 1000,   with_seed = 17,   progress = FALSE ) qsip_normal_17_again <- run_resampling(qsip_normal,   resamples = 1000,   with_seed = 17,   progress = FALSE )  # two runs are identical identical(qsip_normal, qsip_normal_17_again) #> [1] TRUE identical(qsip_normal@resamples$l[[334]], qsip_normal_17_again@resamples$l[[334]]) #> [1] TRUE  # but individual resamplings within are different identical(qsip_normal@resamples$l[[1]], qsip_normal@resamples$l[[2]]) #> [1] FALSE qsip_drought <- run_resampling(qsip_drought,   resamples = 1000,   with_seed = 17,   progress = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/qSIP_workflow.html","id":"eaf-calculations","dir":"Articles","previous_headings":"","what":"EAF Calculations","title":"Standard qSIP Workflow","text":"finally last main step, calculating summarizing excess atom fraction (EAF) values. two functions run, first (run_EAF_calculations()) calculate EAF observed data resamplings, second (summarize_EAF_values()) summarizes data chosen confidence interval. ’ll also mutate() add original Moisture condition dataframe combine . can plot top 25 moisture condition.  plot_feature_curves() function allows us plot tube relative abundances specific feature IDs. Let’s look top .","code":"qsip_normal <- run_EAF_calculations(qsip_normal) qsip_drought <- run_EAF_calculations(qsip_drought)  normal <- summarize_EAF_values(qsip_normal, confidence = 0.9) |>   mutate(Moisture = \"Normal\") #> Confidence level = 0.9  drought <- summarize_EAF_values(qsip_drought, confidence = 0.9) |>   mutate(Moisture = \"Drought\") #> Confidence level = 0.9  eaf <- rbind(normal, drought) eaf |>   group_by(Moisture) |>   slice_max(observed_EAF, n = 25) |>   ggplot(aes(y = reorder(feature_id, observed_EAF), x = mean_resampled_EAF)) +   geom_errorbar(aes(     xmin = lower, xmax = upper,     color = ifelse(lower > 0, \"cornflowerblue\", \"gray10\")   )) +   geom_point(color = \"gray30\") +   geom_vline(xintercept = 0) +   scale_color_identity() +   theme(legend.position = \"none\") +   facet_wrap(~Moisture, ncol = 2) plot_feature_curves(qsip_normal,   feature_ids = c(\"ASV_55\", \"ASV_20\", \"ASV_93\", \"ASV_41\", \"ASV_2\", \"ASV_5\") )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Resampling","text":"qSIP2 use resampling weighted average densities (WADs) obtain confidence intervals WADs within replicates type (unlabeled vs labeled) well shift average WADs types. resampling simple bootstrap procedure source WADs feature_id sampled replacement \\(n\\) times.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"resampling-in-r","dir":"Articles","previous_headings":"","what":"Resampling in R","title":"Resampling","text":"Let’s assume WAD dataset 4 sources labeled - D. Sampling 4 values replacement lead duplicates values missing. example, see B sampled twice (denoted “.1”) C sampled . can wrap purrr::map() function sample \\(n\\) times. output bit messy “.1” column name shown, still 4 values per row excluding NA values.","code":"WADs <- data.frame(\"A\" = 1.679, \"B\" = 1.691, \"C\" = 1.692, \"D\" = 1.703) sample(WADs, replace = TRUE) n <- 5 purrr::map_df(1:n,                ~sample(WADs,                        replace = TRUE,                        size = 4))"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"qsip2-resampling","dir":"Articles","previous_headings":"","what":"qSIP2 resampling","title":"Resampling","text":"qSIP2 package function called run_resampling() perform resampling procedure filtered qSIP_data object. object must first filtered run_feature_filter() function, ’ll come back filtering affects resampling bit. Setting resamples = 1000 give 1000 resamplings feature. resampling deterministic procedure, use seed recommended with_seed argument.","code":"q <- run_feature_filter(example_qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(example_qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S178\", \"S179\", \"S180\"),   min_unlabeled_sources = 3,   min_labeled_sources = 3,   min_unlabeled_fractions = 6,   min_labeled_fractions = 6,   quiet = TRUE ) # running with quiet = TRUE to suppress messages  q <- run_resampling(q,   resamples = 1000,   with_seed = 19,   progress = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"under-the-hood","dir":"Articles","previous_headings":"qSIP2 resampling","what":"Under the hood","title":"Resampling","text":"Internally, qSIP2 code function called makes resampling output bit tidy. removing original names prepending type. , data “labeled” type, resampled values columns labeled_1, labeled_2, etc. also keep data tidy adding additional columns useful. function called directly user, shown just example resampling procedure.","code":"purrr::map_df(1:n, \\(i) calculate_resampled_wads(i, WADs, \"labeled\"))"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"inspect-resample-results","dir":"Articles","previous_headings":"","what":"Inspect resample results","title":"Resampling","text":"resampling results stored qSIP_data object @resamples slot, necessarily intended worked directly. Instead, qSIP_data object helper functions like n_resamples() resample_seed() return number resamples performed seed used, respectively.","code":"n_resamples(q) #> [1] 1000 resample_seed(q) #> [1] 19"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"dataframe-of-resampled-wads","dir":"Articles","previous_headings":"Inspect resample results","what":"Dataframe of resampled WADs","title":"Resampling","text":"want data , can access get_resample_data() function appropriate arguments. Note, set pivot = TRUE dataframe can quite large take assemble/display.","code":"get_resample_data(q) #> # A tibble: 74,000 × 13 #>    feature_id resample unlabeled_1 unlabeled_2 unlabeled_3 unlabeled_4 #>    <chr>         <int>       <dbl>       <dbl>       <dbl>       <dbl> #>  1 ASV_1             1        1.70        1.70        1.71        1.70 #>  2 ASV_10            1        1.71        1.71        1.71        1.72 #>  3 ASV_104           1        1.71        1.71        1.71        1.71 #>  4 ASV_108           1        1.72        1.71        1.72        1.72 #>  5 ASV_11            1        1.72        1.71        1.71        1.72 #>  6 ASV_112           1        1.71        1.71        1.71        1.71 #>  7 ASV_114           1        1.71        1.71        1.72        1.72 #>  8 ASV_119           1        1.72        1.71        1.71        1.72 #>  9 ASV_12            1        1.71        1.71        1.71        1.72 #> 10 ASV_13            1        1.71        1.71        1.71        1.71 #> # ℹ 73,990 more rows #> # ℹ 7 more variables: unlabeled_5 <dbl>, unlabeled_6 <dbl>, unlabeled_7 <dbl>, #> #   unlabeled_8 <dbl>, labeled_1 <dbl>, labeled_2 <dbl>, labeled_3 <dbl>"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"visualizing-range-of-mean-resampled-wads","dir":"Articles","previous_headings":"Inspect resample results","what":"Visualizing range of mean resampled WADs","title":"Resampling","text":"Rather seeing resampled data , often interested range mean WAD values resampling iteration. can leave feature_id argument empty see features, can specify single feature vector features. , select 3 random feature_ids show.  Additional arguments can called add confidence intervals (bars lines) different confidence limit (default = 0.9).","code":"random_features <- sample(get_feature_ids(q, filtered = T), 3) plot_feature_resamplings(q,                           feature_id = random_features) #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's colour values. plot_feature_resamplings(q,                           feature_id = random_features,                          interval = \"bar\") +   labs(title = \"With confidence interval bars\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"when-resampling-goes-wrong","dir":"Articles","previous_headings":"","what":"When resampling goes wrong","title":"Resampling","text":"resampling procedure simple bootstrap procedure, without limitations. common issue sources filtering requires, end WADs contain NA values. Take ASV_72 example, found 1 labeled sources (S178) fraction threshold, removed previous filtering step. , filtering requirements less strict (e.g. setting min_labeled_sources = 1), feature make filtering. now get error running resampling step suggesting increase filtering stringency. happening resampling done consistently across feature_ids, although one labeled source ASV_72, two sources (S179 S180) included resampling WAD value NaN (“number”, .e. numeric form NA). Bootstrapping vector 2/3s NaN fairly often return NaN values, therefore mean undefined. previous error message suggests increasing min_labeled_sources remove number NaN values passed resampling.","code":"q2 <- run_feature_filter(example_qsip_object,   unlabeled_source_mat_ids = get_all_by_isotope(example_qsip_object, \"12C\"),   labeled_source_mat_ids = c(\"S178\", \"S179\", \"S180\"),   min_unlabeled_sources = 3,   min_labeled_sources = 1,   min_unlabeled_fractions = 6,   min_labeled_fractions = 6,   quiet = TRUE ) # running with quiet = TRUE to suppress messages run_resampling(q2,   resamples = 1000,   with_seed = 19,   progress = FALSE ) #> Error in `purrr::map()`: #> ℹ In index: 10. #> Caused by error: #> ! Something went wrong with resampling... #> It is possible that some resampled features contained only <NA> WAD values leading to a failure in calculate_Z(). #> Try increasing your filtering stringency to remove features not found in most sources"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"allow-failures","dir":"Articles","previous_headings":"When resampling goes wrong","what":"Allow failures","title":"Resampling","text":"Although increasing stringency can remove error, also remove features dataset. want keep features (e.g. didn’t want ASV_72 removed), can set allow_failures = TRUE run_resampling() function. allow resampling continue, also return warning message resampling failed iterations features. warning message lets us know problems unlabeled resampling, 4 features failures labeled sources. can see features failures get_resample_counts() filtering values \\(n\\) less 1000 (number resamples). , see indeed ASV_72 successful 693 1000 resamplings. Statistically, may conclude 693 resamplings still robust enough accept conclusion. inspecting plot 3 features show something strange ASV_72 may still choose remove analysis.  can see resampling successes feature plot_successful_resamples() function, histogram shows features 1000 successful resamplings.","code":"q2 <- run_resampling(q2,   resamples = 1000,   with_seed = 19,   allow_failures = TRUE,   progress = FALSE ) #> Warning: NA unlabeled and NA labeled feature_ids had resampling failures. Run #> `get_resample_counts()` or `plot_successful_resamples()` on your <qsip_data> #> object to inspect. get_resample_counts(q2) |>    filter(n < 1000) #> # A tibble: 127 × 3 #>    feature_id labeled_resamples unlabeled_resamples #>    <chr>                  <int>               <int> #>  1 ASV_1                   1000                1000 #>  2 ASV_10                  1000                1000 #>  3 ASV_100                 1000                1000 #>  4 ASV_101                 1000                1000 #>  5 ASV_102                 1000                1000 #>  6 ASV_103                 1000                1000 #>  7 ASV_104                 1000                1000 #>  8 ASV_105                 1000                1000 #>  9 ASV_108                 1000                1000 #> 10 ASV_11                  1000                1000 #> # ℹ 117 more rows plot_feature_resamplings(q2,                           feature_id = c(\"ASV_72\", \"ASV_155\", \"ASV_161\"),                           intervals = \"bar\") plot_successful_resamples(q2)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/resampling.html","id":"using-success-results-for-further-filtering","dir":"Articles","previous_headings":"When resampling goes wrong","what":"Using success results for further filtering","title":"Resampling","text":"Suppose want overlay success data final EAF plot can decide enough resampling support trust EAF value obtain. easy , can modify point color based passing threshold. use success rate 90% (.e. 900 1000 resamples) threshold . , can see although green, ASV_72 show highly enriched confidence interval clear 0. , red dot flags suspect warrants deeper look.","code":"EAF = run_EAF_calculations(q2)  counts = get_resample_counts(q2)  success_rate = 0.9  summarize_EAF_values(EAF) |>   ggplot(aes(y = reorder(feature_id, observed_EAF), x = observed_EAF)) +   geom_point(pch = 21,                       size = 2,                       aes(fill = ifelse((labeled_resamples + unlabeled_resamples) > q@resamples$n*2*success_rate, \"Passed\", \"Failed\"))) +   geom_errorbar(aes(xmin = lower, xmax = upper)) +   scale_fill_manual(values = c(\"Passed\" = \"#00ff0066\", \"Failed\" = \"red\")) +   labs(fill = glue::glue(\">{success_rate * 100}% successes\")) #> Confidence level = 0.9"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"sample-metadata","dir":"Articles","previous_headings":"","what":"Sample Metadata","title":"Working with Sample Data","text":"qSIP2, “sample data” refers metadata associated individual fractions sequencing data. second level metadata - granular “source data”, higher-level “feature data”.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"what-is-a-sample","dir":"Articles","previous_headings":"Sample Metadata","what":"What is a sample?","title":"Working with Sample Data","text":"word sample typically refers biological environmental entity DNA isolated (aka source material). qSIP, however, multiple sequencing runs per source, term sample historically reserved sequencing fraction. practice, means many samples single source. keep proposed MISIP1 standards, source material coded source_mat_id, sequencing run/fraction coded sample_id.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"sample-metadata-1","dir":"Articles","previous_headings":"","what":"Sample Metadata","title":"Working with Sample Data","text":"sample data requirements pass validation three qSIP input types. standardize requirements column names adhere closely MISIP standards possible. Absolute requirements slightly different official MISIP standards, qSIP2 package source_mat_id, sample_id, gradient_position, gradient_pos_density gradient_pos_rel_amt fields.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"source_mat_id-and-sample_id-columns","dir":"Articles","previous_headings":"Sample Metadata","what":"source_mat_id and sample_id columns","title":"Working with Sample Data","text":"One column metadata contain unique sample_id associated source_mat_id. format sample_id doesn’t matter, long unique. popular choice might source_mat_id appended gradient position. source_mat_id match one row qsip_source_data dataframe. although sample_id unique row, expected source_mat_id duplicated.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"gradient_position-and-gradient_pos_density-columns","dir":"Articles","previous_headings":"Sample Metadata","what":"gradient_position and gradient_pos_density columns","title":"Working with Sample Data","text":"columns conforming MISIP standards describe position density values sample_id. Although gradient_position required MISIP, required qSIP. gradient_position typically numbered decreasing density, heaviest 1, second heaviest 2, etc. pass qSIP2 validation gradient_position must positive integer, -1 also accepted designate “bulk” sample (although used qSIP2). gradient_position used directly qSIP2 calculations can useful quality control (see ). gradient_pos_density reported g/ml much decimal place precision method allows.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"gradient_pos_amt-and-gradient_pos_rel_amt-columns","dir":"Articles","previous_headings":"Sample Metadata","what":"gradient_pos_amt and gradient_pos_rel_amt columns","title":"Working with Sample Data","text":"requirement qSIP gradient_pos_rel_amt field, gives percent amount fraction whole. preferred method given qPCR copy numbers, DNA concentrations can used well. gradient_pos_rel_amt column required MISIP standards, qSIP2 also require additional gradient_pos_amt column “raw” abundance values sample. requirement typically qSIP workflow produce gradient_pos_amt values, gradient_pos_rel_amt can derived using add_gradient_pos_rel_amt() function. function simply totals gradient_pos_amt sample source, divides total. math whether using qPCR amplicon copies total DNA isolated. example, 100,000 total 16S copies source determined qPCR, 15,000 copies fraction 7, gradient_pos_rel_amt value fraction 7 0.15 (15,000 / 100,000). Similarly, 25ng total DNA used density separation, fraction 7 3.75 ng DNA recovered, gradient_pos_rel_amt also 0.15 (3.75 / 25). Ideally, gradient_pos_rel_amt given source_mat_id add 12, situations might less 1. example, removed fractions didn’t sequence well reason remove fraction. 16S DNA concentrations removed samples subtracted total. , example , fraction 7 needed removed, total fractions source_mat_id 0.85. Another situation although added 25ng centrifugation, recovered 20ng rest lost3. total fractions within source_mat_id within never greater 1.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"add_gradient_pos_rel_amt-function","dir":"Articles","previous_headings":"Sample Metadata > gradient_pos_amt and gradient_pos_rel_amt columns","what":"add_gradient_pos_rel_amt() function","title":"Working with Sample Data","text":"can use total abundance (qPCR DNA concentrations) calculate gradient_pos_rel_amt column. Trying run function dataframe existing gradient_pos_rel_amt give error, can overridden overwrite = T flag.","code":"sample_df <- add_gradient_pos_rel_amt(example_sample_df,   source_mat_id = \"source\",   amt = \"avg_16S_g_soil\" ) sample_df |>   add_gradient_pos_rel_amt(     source_mat_id = \"source\",     amt = \"avg_16S_g_soil\"   ) #> Error: gradient_pos_rel_amt already exists! Set overwrite = TRUE if you want to overwrite sample_df |>   add_gradient_pos_rel_amt(     source_mat_id = \"source\",     amt = \"avg_16S_g_soil\",     overwrite = T   )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"making-a-qsip_sample_data-object","dir":"Articles","previous_headings":"","what":"Making a qsip_sample_data object","title":"Working with Sample Data","text":"qsip_sample_data constructor builds sample data object dataframe. can use sample_df built (relative amounts) build qsip object. can take another look make sure column names need.","code":"sample_object <- qsip_sample_data(sample_df,   sample_id = \"sample\",   source_mat_id = \"source\",   gradient_position = \"Fraction\",   gradient_pos_density = \"density_g_ml\",   gradient_pos_amt = \"avg_16S_g_soil\",   gradient_pos_rel_amt = \"gradient_pos_rel_amt\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"working-with-a-qsip_sample_data-object","dir":"Articles","previous_headings":"","what":"Working with a qsip_sample_data object","title":"Working with Sample Data","text":"sample_object created ready next step main workflow, can also use intermediate analysis QC.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"look-for-density-outliers","dir":"Articles","previous_headings":"Working with a qsip_sample_data object","what":"Look for density outliers","title":"Working with Sample Data","text":"Sometimes might errors density values spreadsheet, particularly entered hand. plot_density_outliers() can help identify outliers using Cook’s distance specified sensitivity value. lower sensitivity parameter, sensitive algorithm calling point outlier.  see values ends density ranges slightly lower gradient position suggest, therefore considered possible outliers colored red. ends density ranges, however, expected fall main line, results concerning .","code":"plot_density_outliers(sample_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/sample_data.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"Working with Sample Data","text":"qSIP2 sample data object built error checking data types passed. example, modify Fraction column characters instead integers get validation error.","code":"sample_object <- sample_df |>   mutate(Fraction = as.character(Fraction)) |>   qsip_sample_data(     sample_id = \"sample\",     source_mat_id = \"source\",     gradient_position = \"Fraction\",     gradient_pos_density = \"density_g_ml\",     gradient_pos_amt = \"avg_16S_g_soil\",     gradient_pos_rel_amt = \"gradient_pos_rel_amt\"   ) #> Error: some gradient_position values are non-numeric"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"source-material-and-metadata","dir":"Articles","previous_headings":"","what":"Source Material and Metadata","title":"Working with Source Data","text":"SIP experiment, “source material” subjects running experiments (e.g. culture tube plant root). qSIP source material DNA extraction loaded column isopycnic centrifugation. “source data” highest level metadata row corresponding original experimental source material object. required columns valid source data including unique ID (MISIP source_mat_id), measure quantitative abundance source material (either total DNA qPCR copies), isotope substrate designation (MISIP isotope isotopolog, respectively). example source dataframe included qSIP2 package called example_source_df (first rows shown ). addition required columns, source data can contain many ancillary columns necessary. additional columns might contain important experiment-specific metadata use group subset source material qSIP workflow. , can also details might need qSIP, may make sense just keep everything included ’re already .txt. excel file.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"preparing-the-source-data","dir":"Articles","previous_headings":"","what":"Preparing the source data","title":"Working with Source Data","text":"requirements source data minimal, still strict. three columns necessary - unique source ID, isotope designation substrate/isotopolog information. dataframe looks good necessary fields.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"qsip2-source-data-object","dir":"Articles","previous_headings":"","what":"qSIP2 Source Data Object","title":"Working with Source Data","text":"dataframe ready, next step convert qsip_source_data object. one main qSIP2 objects hold validate data.","code":"source_object <- qsip_source_data(example_source_df,   isotope = \"Isotope\",   isotopolog = \"isotopolog\",   source_mat_id = \"source\" )  class(source_object) #> [1] \"qsip_source_data\" \"S7_object\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"structure-of-qsip_source_data","dir":"Articles","previous_headings":"qSIP2 Source Data Object","what":"Structure of qsip_source_data","title":"Working with Source Data","text":"object meant inspected worked outside qSIP2 functions, quick glimpse() can show structure . original dataframe contained @data slot, however, column names modified standard MISIP names, keeping record original names corresponding slots","code":"glimpse(source_object) #> <qsip_source_data> #>  @ data         : tibble [15 × 6] (S3: tbl_df/tbl/data.frame) #>  $ isotope           : chr [1:15] \"12C\" \"12C\" \"12C\" \"12C\" ... #>  $ isotopolog        : chr [1:15] \"glucose\" \"glucose\" \"glucose\" \"glucose\" ... #>  $ source_mat_id     : chr [1:15] \"S149\" \"S150\" \"S151\" \"S152\" ... #>  $ total_copies_per_g: num [1:15] 34838665 53528072 95774992 9126192 41744046 ... #>  $ total_dna         : num [1:15] 74.5 109 182.2 23.7 67.6 ... #>  $ Moisture          : chr [1:15] \"Normal\" \"Normal\" \"Normal\" \"Normal\" ... #>  @ isotope      : chr \"Isotope\" #>  @ isotopolog   : chr \"isotopolog\" #>  @ source_mat_id: chr \"source\""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"validation-of-qsip_source_data","dir":"Articles","previous_headings":"qSIP2 Source Data Object","what":"Validation of qsip_source_data","title":"Working with Source Data","text":"constructing qsip_source_data object validation checks performed. now, checks source_mat_id unique row, isotope field appropriate value. doesn’t just mean value makes sense, also one isotopes qSIP2 knows calculate atom fraction values . currently limited 12C/13C, 14N/15N 16O/18O. One benefit validation steps embedded object validations automatically run object modified. makes impossible modify data later invalid object, e.g. changing isotope invalid choice.","code":"source_object@data$isotope <- \"13G\" #> invalid isotope found: 13G #> Error: Please fix the isotope names and try again"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"misip","dir":"Articles","previous_headings":"","what":"MISIP","title":"Working with Source Data","text":"qSIP standards part MISIP standards, qSIP2 package little less stringent. means valid qSIP2 object might valid MISIP submission. source data level primarily difference isotope data coded, plus addition another isotopolog_label column. qSIP2 functions convert two types. add_isotoplog_label() makes MISIP version source data, remove_isotopolog_label() converts back qSIP2 compatible version. Two things changed running add_isotoplog_label() - 1) isotopolog_label column added populated either “isotopically labeled” “natural abundance” heavy light isotopes, respectively, 2) isotope column gets modified heavy isotope (e.g. “12C” entries become “13C”).","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"adding-the-isotopolog_label-column","dir":"Articles","previous_headings":"MISIP","what":"Adding the isotopolog_label column","title":"Working with Source Data","text":"Now, Isotope column renamed isotope satisfy MISIP standards, values replaced heavy isotope. designation whether source material “light” “heavy” version isotope now transferred isotopolog_label column.","code":"example_source_df_MISIP <- example_source_df |>   add_isotopolog_label(isotope = \"Isotope\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/articles/source_data.html","id":"removing-the-isotopolog_label-column","dir":"Articles","previous_headings":"MISIP","what":"Removing the isotopolog_label column","title":"Working with Source Data","text":"change can reverted remove_isotopolog_label() function. Note, original exactly preserved original Isotope column MISIP standard isotope name retained.","code":"example_source_df_ORIGINAL <- remove_isotopolog_label(example_source_df_MISIP)"},{"path":"https://jeffkimbrel.github.io/qSIP2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeff Kimbrel. Author, maintainer.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kimbrel J (2024). qSIP2: qSIP Analysis. R package version 0.12.5.9005,  https://jeffkimbrel.github.io/qSIP2/, https://github.com/jeffkimbrel/qSIP2.","code":"@Manual{,   title = {qSIP2: qSIP Analysis},   author = {Jeff Kimbrel},   year = {2024},   note = {R package version 0.12.5.9005,  https://jeffkimbrel.github.io/qSIP2/},   url = {https://github.com/jeffkimbrel/qSIP2}, }"},{"path":"https://jeffkimbrel.github.io/qSIP2/index.html","id":"qsip2-","dir":"","previous_headings":"","what":"qSIP Analysis","title":"qSIP Analysis","text":"qSIP2 R package refactored reimagined version original qSIP pipeline. come!","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"qSIP Analysis","text":"can install development version qSIP2 GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jeffkimbrel/qSIP2\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_gradient_pos_rel_amt.html","id":null,"dir":"Reference","previous_headings":"","what":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","title":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","text":"function calculate relative amount fraction compared whole replicate using either qPCR copies DNA concentrations.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_gradient_pos_rel_amt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","text":"","code":"add_gradient_pos_rel_amt(   data,   amt,   source_mat_id = \"source_mat_id\",   overwrite = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_gradient_pos_rel_amt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","text":"data (dataframe) Sample metadata amt (string) Column name qPCR DNA amounts per fraction source_mat_id (string, default: \"source_mat_id\") Grouping variable replicate overwrite (bool, default: FALSE) Determines whether overwrite existing gradient_pos_rel_amt column","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_gradient_pos_rel_amt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add gradient_pos_rel_amt to data — add_gradient_pos_rel_amt","text":"dataframe gradient_pos_rel_amt column","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_isotopolog_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Add isotopolog_label to source data — add_isotopolog_label","title":"Add isotopolog_label to source data — add_isotopolog_label","text":"convert isotope dataframe one isotope isotopolog_label satisfy MISIP requirements","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_isotopolog_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add isotopolog_label to source data — add_isotopolog_label","text":"","code":"add_isotopolog_label(data, isotope = \"isotope\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_isotopolog_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add isotopolog_label to source data — add_isotopolog_label","text":"data (dataframe) Sample metadata isotope (string, default: \"isotope\") Column name isotope data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_isotopolog_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add isotopolog_label to source data — add_isotopolog_label","text":"dataframe isotopolog_label column added isotope column modified","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a taxonomy table to qSIP abundance data — add_taxonomy","title":"Add a taxonomy table to qSIP abundance data — add_taxonomy","text":"function designed add taxonomy data feature table, reality can hold metadata want associate features. requirement metadata table must feature id column values match feature ids qsip_feature_data object, ids must duplicated.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a taxonomy table to qSIP abundance data — add_taxonomy","text":"","code":"add_taxonomy(feature_object, taxa, feature_id)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a taxonomy table to qSIP abundance data — add_taxonomy","text":"feature_object (qsip_feature_data) object qsip_feature_data class taxa (dataframe) taxa table id (string) column name feature ids match ids abundance table","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/add_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a taxonomy table to qSIP abundance data — add_taxonomy","text":"updated qsip_feature_data taxonomy slot populated taxonomy dataframe.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_EAF.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate EAF value (internal) — calculate_EAF","title":"Calculate EAF value (internal) — calculate_EAF","text":"Calculate EAF value (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_EAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate EAF value (internal) — calculate_EAF","text":"","code":"calculate_EAF(M_labeled, M, M_labeledmax, isotope)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_EAF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate EAF value (internal) — calculate_EAF","text":"M_labeled Molecular weight labeled feature M Molecular weight unlabeled feature M_labeledmax Theoretical molecular weight completely labeled feature isotope isotope determine calculation run","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_EAF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate EAF value (internal) — calculate_EAF","text":"EAF value","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate molecular weight of the labeled feature (internal) — calculate_M","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"GC value given equation usually calculated density value, derived sequence .","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"","code":"calculate_M(G)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"G (numeric) GC content feature, ranges 0-1.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"M molecular weight sequence G GC content","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M","text":"function corresponds equation 6 Hungate, 2015.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeled.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","text":"Calculate molecular weight labeled feature (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","text":"","code":"calculate_M_labeled(M, W_lab_mean, W_unlab_mean)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","text":"M (numeric) Molecular weight unlabeled feature W_lab_mean (numeric) WAD (mean WAD) value labeled feature W_unlab_mean (numeric) WAD (mean WAD) value unlabeled feature","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeled","text":"M_labeled molecular weight labeled feature","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeledmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","text":"function corresponds equation 7 Hungate, 2015","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeledmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","text":"","code":"calculate_M_labeledmax(M, atom_count, isotope, propO = 1)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeledmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","text":"M (numeric) Molecular weight unlabeled feature atom_count (numeric) count relevant atoms (C, N O) isotope (string) heavy isotope determining calculation run. Needs 13C, 15N 18O propO (numeric) Proportion oxygen atoms DNA come environmental water","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_M_labeledmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate molecular weight of the labeled feature (internal) — calculate_M_labeledmax","text":"M_labeledmax theoretical maximum molecular weight labeled feature ","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the WAD difference Z (internal) — calculate_Z","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"just basic subtraction, probably overkill make function!","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"","code":"calculate_Z(labeled, unlabeled)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"labeled (string) column labeled WAD mean labeled WAD value unlabeled (string) column unlabeled WAD mean unlabeled WAD value","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"value difference labeled unlabeled","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_Z.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the WAD difference Z (internal) — calculate_Z","text":"function corresponds equation 4 Hungate, 2015","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_atoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","title":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","text":"Carbon nitrogen atoms varies GC content, oxygen content constant DNA regardless GC content.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_atoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","text":"","code":"calculate_atoms(G, isotope)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_atoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","text":"G (numeric) GC percentage isotope (string) isotope use calculations... either 13C, 15N 18O","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_atoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of relevant atoms per nucleotide (internal) — calculate_atoms","text":"(numeric) number atoms per nucleotide","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"function takes density value optional method returns predicted GC% content DNA sequence density.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"","code":"calculate_gc_from_density(density, method = \"MM\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"density (numeric) Density WAD values method (string, default: MM) GC% calculation method","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"vector GC% values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate GC% from density/WAD (internal) — calculate_gc_from_density","text":"method parameter changes formula provided McHugh & Morrissey (MM, unpublished) Schildkraut (S, 1962). function corresponds equation 5 Hungate, 2015","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","title":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","text":"function takes sequence counts number G C bases, divides total sequence length.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","text":"","code":"calculate_gc_from_sequence(sequence)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","text":"sequence (string) Density WAD values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_gc_from_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate GC% from a sequence (internal) — calculate_gc_from_sequence","text":"vector GC% values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_resampled_wads.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","title":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","text":"Designed purrr::map() function called run_resampling.R","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_resampled_wads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","text":"","code":"calculate_resampled_wads(i, wad_data, type, allow_failures = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_resampled_wads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","text":"(integer) specific iteration resampling wad_data (dataframe) WAD dataframe resample columns type (string) Text whether wad data labeled unlabeled data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_resampled_wads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function for resampling WAD values (internal) — calculate_resampled_wads","text":"resampling data boot @resamples","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_source_wads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","title":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","text":"Calculate global weighted average density (WAD) value source_mat_id (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_source_wads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","text":"","code":"calculate_source_wads(sample_data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_source_wads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","text":"sample_data (qsip_sample_data) Sample data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_source_wads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate global weighted average density (WAD) value for a source_mat_id (internal) — calculate_source_wads","text":"dataframe two columns, 1) source_mat_id 2) global WAD value source_mat_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"\"tube level relative abundance\" two layers relative abundance. first takes raw_abundance counts per sample, divides total get rel_abundance values. Next, takes values divides gradient_pos_rel_amt values stored source level normalizes rel_abundance values amount sample per fraction. final value stored tube_rel_abundance column.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"","code":"calculate_tube_rel_abundance(source_data, sample_data, feature_data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"source_data (qsip_source_data) qSIP source data object sample_data (qsip_sample_data) qSIP sample data object feature_data (qsip_feature_data) qSIP feature data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"long format dataframe one row per feature_id per sample_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_tube_rel_abundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate tube relative abundance (internal) — calculate_tube_rel_abundance","text":"speed calculations, function removes feature_ids sample abundance zero. v0.10.3 updated function different behavior feature type 'normalized'. type use raw data feature table, putting values tube_rel_abundance column.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_wads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted average density (WAD) values (internal) — calculate_wads","title":"Calculate weighted average density (WAD) values (internal) — calculate_wads","text":"Calculate weighted average density (WAD) values (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_wads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted average density (WAD) values (internal) — calculate_wads","text":"","code":"calculate_wads(tube_rel_abundance)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_wads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted average density (WAD) values (internal) — calculate_wads","text":"tube_rel_abundance (dataframe) Output calculate_tube_rel_abundance()","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/calculate_wads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weighted average density (WAD) values (internal) — calculate_wads","text":"list two objects, 1) dataframe WAD info feature_ids found least one sample, 2) fraction counts feature_ids, including found samples. also prints message screen count feature_ids entirely missing least one sample.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/completely_labeled_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","title":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","text":"Returns max labeling given isotope (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/completely_labeled_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","text":"","code":"completely_labeled_values(isotope)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/completely_labeled_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","text":"isotope heavy isotope (13C, 15N 18O)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/completely_labeled_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the max labeling of a given isotope (internal) — completely_labeled_values","text":"number representing max labeling given isotope","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Feature Abundance Dataframe — example_feature_df","title":"Example Feature Abundance Dataframe — example_feature_df","text":"example feature table abundances","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Feature Abundance Dataframe — example_feature_df","text":"","code":"example_feature_df"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_df.html","id":"example-feature-df","dir":"Reference","previous_headings":"","what":"example_feature_df","title":"Example Feature Abundance Dataframe — example_feature_df","text":"data frame 2,030 rows 285 columns: ASV unique feature ID Columns 2-285 IDs samples","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Feature Object — example_feature_object","title":"Example qSIP Feature Object — example_feature_object","text":"example qsip_feature_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_feature_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Feature Object — example_feature_object","text":"","code":"example_feature_object"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Object — example_qsip_object","title":"Example qSIP Object — example_qsip_object","text":"example qsip_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_qsip_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Object — example_qsip_object","text":"","code":"example_qsip_object"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Sample Dataframe — example_sample_df","title":"Example Sample Dataframe — example_sample_df","text":"example sample data table fraction-related metadata","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Sample Dataframe — example_sample_df","text":"","code":"example_sample_df"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_df.html","id":"example-sample-df","dir":"Reference","previous_headings":"","what":"example_sample_df","title":"Example Sample Dataframe — example_sample_df","text":"data frame 284 rows 6 columns: sample unique sample id fraction source parent source id sample Fraction gradient position density_g_ml density fraction dna_conc concentration DNA post-fractionation avg_16S_g_soil qPCR amplicon count","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Sample Object — example_sample_object","title":"Example qSIP Sample Object — example_sample_object","text":"example qsip_sample_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_sample_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Sample Object — example_sample_object","text":"","code":"example_sample_object"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Source Dataframe — example_source_df","title":"Example Source Dataframe — example_source_df","text":"example source data table top-level (pre-fractionation) metadata","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Source Dataframe — example_source_df","text":"","code":"example_source_df"},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_df.html","id":"example-source-df","dir":"Reference","previous_headings":"","what":"example_source_df","title":"Example Source Dataframe — example_source_df","text":"data frame 15 rows 5 columns: source unique name biological replicate source_mat_id total_copies_per_g total amplicon copies determined qPCR total_dna total DNA isolated source Isotope isotope used source Moisture example relevant treatment","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Example qSIP Source Object — example_source_object","title":"Example qSIP Source Object — example_source_object","text":"example qsip_source_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/example_source_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example qSIP Source Object — example_source_object","text":"","code":"example_source_object"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/find_shared_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","title":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","text":"function finds shared source_mat_ids source_data sample_data, sample_ids sample_data feature_data objects. also reports ids unique object. passing qsip_data object first argument, arguments necessary. qsip_source_data given, sample_data feature_data objects must given well. Additionally, results find_share_ids() might obtained @shared slot qsip_data object. data can also \"pretty printed\" using show_unshared_ids(<qsip_data>) function.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/find_shared_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","text":"","code":"find_shared_ids(source_data, sample_data = NULL, feature_data = NULL)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/find_shared_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","text":"source_data (qsip_source_data qsip_data) qSIP object source data object sample_data (qsip_sample_data) qSIP sample data object feature_data (qsip_feature_data) qSIP feature data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/find_shared_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find shared source_mat_ids and sample_ids in qSIP objects (internal) — find_shared_ids","text":"list two lists, one source_mat_ids one sample_ids.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/fraction_results_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter features by fraction message formatting (internal) — fraction_results_message","title":"Filter features by fraction message formatting (internal) — fraction_results_message","text":"Filter features fraction message formatting (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/fraction_results_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter features by fraction message formatting (internal) — fraction_results_message","text":"","code":"fraction_results_message(by_fraction)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/fraction_results_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter features by fraction message formatting (internal) — fraction_results_message","text":"by_fraction by_fraction dataframe run_feature_filter","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_all_by_isotope.html","id":null,"dir":"Reference","previous_headings":"","what":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","title":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","text":"Get source_mat_ids meeting certain isotope conditions","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_all_by_isotope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","text":"","code":"get_all_by_isotope(qsip_data_object, isotopes)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_all_by_isotope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","text":"qsip_data_object (qsip_data qsip_source_data) qsip object source data isotopes (string(s)) Isotopes used pull source_mat_ids. Can standard isotope name (e.g. 12C) special terms labeled unlabeled","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_all_by_isotope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get source_mat_ids meeting certain isotope conditions — get_all_by_isotope","text":"vector source_mat_ids. may also print messages.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the original dataframe from a qsip_feature_data object — get_dataframe","title":"Return the original dataframe from a qsip_feature_data object — get_dataframe","text":"Return original dataframe qsip_feature_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the original dataframe from a qsip_feature_data object — get_dataframe","text":"x (qsip_feature_data) qSIP feature data object original_headers (logical) Return original column names type (source, sample feature) giving qSIP object type determines dataframe retrieve","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_feature_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the feature_ids in a qsip object — get_feature_ids","title":"Return the feature_ids in a qsip object — get_feature_ids","text":"Return feature_ids qsip object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_feature_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the feature_ids in a qsip object — get_feature_ids","text":"","code":"get_feature_ids(qsip_data_object, filtered = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_feature_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the feature_ids in a qsip object — get_feature_ids","text":"qsip_data_object qSIP_data object run run_resampling() filtered (Boolean) TRUE, return feature_ids filtered data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_source_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the number of sources the feature is found in — get_filtered_source_counts","title":"Return the number of sources the feature is found in — get_filtered_source_counts","text":"Return number sources feature found ","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_source_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the number of sources the feature is found in — get_filtered_source_counts","text":"","code":"get_filtered_source_counts(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_filtered_source_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the number of sources the feature is found in — get_filtered_source_counts","text":"qsip_data_object (qsip_data) qsip data object filtered","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer which isotope calculations to use (internal) — get_isotope_designation","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"uses list source_mat_ids filtered qsip_data object get isotope designation two reasons, 1) make sure comparable (e.g. 12C/13C, 14N/15N 16O/18O mismatches), 2) return best guess labeled isotope EAF calculations proceed correctly.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"","code":"get_isotope_designation(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"qsip_dat_object (qsip_data) qsip_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_isotope_designation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer which isotope calculations to use (internal) — get_isotope_designation","text":"single labeled isotope designation 13C, 15N 18O, gives error inference made.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get counts of successful resampling — get_resample_counts","title":"Get counts of successful resampling — get_resample_counts","text":"feature_id label type, function return counts successful resampling. value typically number resamples given run_resampling(), run_resampling() called allow_failures = TRUE number successful resamples might less number resamples given.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get counts of successful resampling — get_resample_counts","text":"","code":"get_resample_counts(qsip_data_object, as_percentage = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get counts of successful resampling — get_resample_counts","text":"qsip_data_object (qsip_data) qsip data object resampled as_percentage (logical) TRUE, counts returned percentage total number resamples","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get counts of successful resampling — get_resample_counts","text":"dataframe columns feature_id, type, n","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get counts of successful resampling — get_resample_counts","text":"as_percentage TRUE, counts returned percentage total number resamples.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataframe of resampled data — get_resample_data","title":"Get dataframe of resampled data — get_resample_data","text":"function return dataframe resampled data embedded qsip_data object.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataframe of resampled data — get_resample_data","text":"","code":"get_resample_data(qsip_data_object, type = \"all\", pivot = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dataframe of resampled data — get_resample_data","text":"qsip_data_object qsip_data object run run_resampling() type (string) type data return: \"\", \"unlabeled\", \"labeled\" pivot (boolean) Whether pivot data long format keep wide","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_resample_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dataframe of resampled data — get_resample_data","text":"dataframe resampled data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_source_mat_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the source_mat_ids in a qsip object — get_source_mat_ids","title":"Return the source_mat_ids in a qsip object — get_source_mat_ids","text":"Return source_mat_ids qsip object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_source_mat_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the source_mat_ids in a qsip object — get_source_mat_ids","text":"","code":"get_source_mat_ids(qsip_data_object, filtered = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/get_source_mat_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the source_mat_ids in a qsip object — get_source_mat_ids","text":"qsip_data_object qSIP_data object run run_resampling() filtered (Boolean) TRUE, return feature_ids filtered data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/infer_source_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a source data frame from a sample data frame — infer_source_data","title":"Generate a source data frame from a sample data frame — infer_source_data","text":"may situations verbose sample data frame data samples source materials. function attempts infer source data frame sample data frame. grouping source matrix ID checking see values column ., column kept source data frame. , column dropped.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/infer_source_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a source data frame from a sample data frame — infer_source_data","text":"","code":"infer_source_data(sample_data, source_mat_id)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/infer_source_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a source data frame from a sample data frame — infer_source_data","text":"sample_data (dataframe) data frame combined sample source data source_mat_id (string) column source_mat_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/infer_source_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a source data frame from a sample data frame — infer_source_data","text":"data frame inferred source data","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/n_resamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of resamples — n_resamples","title":"Number of resamples — n_resamples","text":"Number resamples","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/n_resamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of resamples — n_resamples","text":"","code":"n_resamples(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/n_resamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of resamples — n_resamples","text":"qsip_data_object qSIP_data object run run_resampling()","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/pivot_kbase_amplicon_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot KBase amplicon matrix — pivot_kbase_amplicon_matrix","title":"Pivot KBase amplicon matrix — pivot_kbase_amplicon_matrix","text":"Pivot KBase amplicon matrix","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/pivot_kbase_amplicon_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot KBase amplicon matrix — pivot_kbase_amplicon_matrix","text":"","code":"pivot_kbase_amplicon_matrix(amplicon)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/pivot_kbase_amplicon_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot KBase amplicon matrix — pivot_kbase_amplicon_matrix","text":"amplicon amplicon matrix KBase","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_EAF_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot EAF and confidence intervals — plot_EAF_values","title":"Plot EAF and confidence intervals — plot_EAF_values","text":"function plots observed EAF values feature dataset. features ordered observed EAF values. confidence intervals plotted error bars ribbons. points colored based success ratio resamples.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_EAF_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot EAF and confidence intervals — plot_EAF_values","text":"","code":"plot_EAF_values(   qsip_data_object,   confidence = 0.9,   success_ratio = 0.9,   top = Inf,   error = \"none\",   alpha = 0.3,   zero_line = TRUE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_EAF_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot EAF and confidence intervals — plot_EAF_values","text":"qsip_data_object (qsip_data) qsip data object confidence (numeric) confidence level confidence interval success_ratio (numeric) ratio successful resamples total resamples top (numeric) number top features plot. Use Inf error (character) type error bars plot. Options 'none', 'bar', 'ribbon' alpha (numeric) transparency error bar/ribbon zero_line (logical) Add line EAF = 0","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_density_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","title":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","text":"Assuming linear relationship gradient_position gradient_pos_density, function plot potential outliers using Cook's distance defined sensitivity. lower sensitivity, likely outliers flagged.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_density_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","text":"","code":"plot_density_outliers(sample_data, sensitivity = 4)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_density_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","text":"sample_data (qsip_sample_data qsip_data) qsip object sample data sensitivity (numeric, default: 4) sensitivity value, lower values sensitive outlier detection","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_density_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cook's outlier detection on gradient positions vs densities — plot_density_outliers","text":"ggplot object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot qSIP feature data density curves — plot_feature_curves","title":"Plot qSIP feature data density curves — plot_feature_curves","text":"Plot qSIP feature data density curves","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot qSIP feature data density curves — plot_feature_curves","text":"","code":"plot_feature_curves(qsip_data_object, feature_ids, source_mat_ids = NULL)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot qSIP feature data density curves — plot_feature_curves","text":"qsip_data_object (qsip_data) qsip data object tube relative abundances feature_ids (string) Feature ids plotted facet source_mat_ids (string, defaults ) list source material ids","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot qSIP feature data density curves — plot_feature_curves","text":"ggplot object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_resamplings.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the resampled EAFs for each feature — plot_feature_resamplings","title":"Plot the resampled EAFs for each feature — plot_feature_resamplings","text":"plot show results resampling procedure feature. resampling procedure run using run_resampling() function. plot show mean resampled EAF feature, confidence interval (default 90%) shown bar line (default line). area curve can also shown (default TRUE).","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_resamplings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the resampled EAFs for each feature — plot_feature_resamplings","text":"","code":"plot_feature_resamplings(   qsip_data_object,   feature_ids = NULL,   area = TRUE,   confidence = 0.9,   intervals = \"\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_resamplings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the resampled EAFs for each feature — plot_feature_resamplings","text":"qsip_data_object (qsip_data) qsip data object resampled feature_ids (character vector) vector feature ids filter area (boolean) Whether plot area curve (default: TRUE) confidence (numeric) confidence interval plot intervals (character) Whether plot confidence interval bar, line (default)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_feature_resamplings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the resampled EAFs for each feature — plot_feature_resamplings","text":"ggplot object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_filter_gradient_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of filtering features — plot_filter_gradient_position","title":"Plot the results of filtering features — plot_filter_gradient_position","text":"running run_feature_filter() code, function produce two plot detailing consequences filtering. Plot shows retained removed features total tube relative abundance contribution, plot B shows retained removed features total count category. \"zero fractions\" shown plot B entirely missing given source_mat_id thus going retained matter run_filter_feature() parameters .","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_filter_gradient_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of filtering features — plot_filter_gradient_position","text":"","code":"plot_filter_gradient_position(   qsip_data_object,   return_type = \"combined\",   colors = NULL )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_filter_gradient_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of filtering features — plot_filter_gradient_position","text":"qsip_data_object (qsip_data) return_type (string, default: combined) Changes return type combined plot (combined), list individual plots (individual) list dataframes (dataframe) colors (strings) optional color palette","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_filter_gradient_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of filtering features — plot_filter_gradient_position","text":"Combined individual plots, raw dataframes","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_resampling_convergence.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot resampling convergence (under construction!) — plot_resampling_convergence","title":"Plot resampling convergence (under construction!) — plot_resampling_convergence","text":"Plot resampling convergence (construction!)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_resampling_convergence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot resampling convergence (under construction!) — plot_resampling_convergence","text":"","code":"plot_resampling_convergence(q)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_sample_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot qSIP sample data density curves — plot_sample_curves","title":"Plot qSIP sample data density curves — plot_sample_curves","text":"Plot qSIP sample data density curves","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_sample_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot qSIP sample data density curves — plot_sample_curves","text":"","code":"plot_sample_curves(qsip_data, colors = NULL)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_sample_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot qSIP sample data density curves — plot_sample_curves","text":"qsip_data (qsip_data) qSIP object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_sample_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot qSIP sample data density curves — plot_sample_curves","text":"ggplot object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_source_wads.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the source WADs by isotope — plot_source_wads","title":"Plot the source WADs by isotope — plot_source_wads","text":"Plot source WADs isotope","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_source_wads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the source WADs by isotope — plot_source_wads","text":"","code":"plot_source_wads(qsip_data, group = NULL, colors = NULL)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_source_wads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the source WADs by isotope — plot_source_wads","text":"qsip_data (qsip_data) qSIP object group (string) optional grouping parameter facet y x,y axes color (string) optional override default color palette","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_source_wads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the source WADs by isotope — plot_source_wads","text":"ggplot object","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_successful_resamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","title":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","text":"function plot number successful resamples feature_id. value typically number resamples given run_resampling(), run_resampling() called allow_failures = TRUE number successful resamples might less number resamples given.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_successful_resamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","text":"","code":"plot_successful_resamples(   qsip_data_object,   labels = FALSE,   as_percentage = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_successful_resamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","text":"qsip_data_object (qsip_data) qsip data object resampled labels (logical) TRUE, counts labeled plot as_percentage (logical) TRUE, x axis percentage total number resamples","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/plot_successful_resamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the number of successful resamples for each feature_id — plot_successful_resamples","text":"ggplot object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP master data class — qsip_data","title":"qSIP master data class — qsip_data","text":"qsip_data object holds validated qSIP source, sample feature metadata, slots store subsequence qSIP2 analysis.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qSIP master data class — qsip_data","text":"","code":"qsip_data(source_data, sample_data, feature_data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qSIP master data class — qsip_data","text":"source_data (qsip_source_data) qSIP source data object sample_data (qsip_sample_data) qSIP sample data object feature_data (qsip_feature_data) qSIP feature data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"qSIP master data class — qsip_data","text":"validated qsip_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"qSIP master data class — qsip_data","text":"qsip_data() typical function, rather class constructor instantiates new qsip_data object. constructor takes qsip_source_data, qsip_sample_data qsip_feature_data input returns validated qsip_data object. qsip_data object holds source, sample feature data. also creates empty slots hold filtering results, resampling EAF values associated functions. reason, qsip_data object intended progressively overwritten new analysis results, new objects can created point analysis, necessary. example, study multiple comparison groups might combined one large qSIP_data object, split separate objects run_feature_filtering() step. Internally, creating original qSIP objects renamed metadata columns standardized MISIP terminology. data.frame standardized names can extracted back qSIP_data using get_dataframe() method required type argument \"source\", \"sample\" \"feature\". optional original_headers argument can set TRUE return original column names.","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP feature table class — qsip_feature_data","title":"qSIP feature table class — qsip_feature_data","text":"qsip_feature_data object holds validated feature metadata.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qSIP feature table class — qsip_feature_data","text":"","code":"qsip_feature_data(data, feature_id = \"feature_id\", type = \"counts\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qSIP feature table class — qsip_feature_data","text":"data (dataframe) ASV/OTU table equivalent feature_id (string) Column name unique taxa IDs type (string, default: counts) type numerical data, either counts, coverage, normalized relative","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"qSIP feature table class — qsip_feature_data","text":"validated object qsip_feature_data type","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_feature_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"qSIP feature table class — qsip_feature_data","text":"qsip_feature_data() typical function, rather class constructor instantiates new qsip_feature_data object. constructor takes data.frame input returns validated qsip_feature_data object. qsip_feature_data object used hold feature metadata, amplicon sequence variants (ASVs), operational taxonomic units (OTUs), metagenome-assembled genomes (MAGs), etc. data argument takes data.frame feature IDs column designated feature_id argument. row corresponds unique feature (amplicon, MAG, etc) subsequent row corresponds unique sample. type argument used designate type data data argument. likely counts amplicon data, coverage metagenome data (including normalizations like TPM). data relative abundances, type argument set relative. Overall, choice much affect results qSIP analysis, choosing accurate type help validation checks. Internally, qsip_feature_data renames metadata columns standardized MISIP terminology. data.frame standardized names can extracted back object using get_dataframe() method, optional original_headers argument can set TRUE return original column names. several validation checks run data data.frame: data argument must contain data.frame, including tibble feature_id argument must column name data.frame feature_id column must contain unique values per row type argument must one counts, coverage relative type argument counts default, case values data argument must integers type set relative values data argument must numeric values must sum 1 row type set coverage, values data argument must numeric type set normalized values assumed pre-normalized additional transformations done. values data argument must non-negative","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP sample data class — qsip_sample_data","title":"qSIP sample data class — qsip_sample_data","text":"qsip_sample_data object holds validated sample metadata.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qSIP sample data class — qsip_sample_data","text":"","code":"qsip_sample_data(   data,   sample_id = \"sample_id\",   source_mat_id = \"source_mat_id\",   gradient_position = \"gradient_position\",   gradient_pos_density = \"gradient_pos_density\",   gradient_pos_amt = \"gradient_pos_amt\",   gradient_pos_rel_amt = \"\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qSIP sample data class — qsip_sample_data","text":"data (dataframe) Metadata samples/fractions sample_id (string) unique sample ID source_mat_id (string) unique ID biological subject replicate gradient_position (string) Column name fraction position gradient_pos_density (string) Column name gradient density gradient_pos_amt (string) Column name total amount per fraction, either qPCR copies DNA gradient_pos_rel_amt (string) Column name relative fraction abundance compared total fraction_volume (string) volume loaded onto column. Required gradient_pos_amt reported concentration","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"qSIP sample data class — qsip_sample_data","text":"validated object qsip_sample_data type","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_sample_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"qSIP sample data class — qsip_sample_data","text":"qsip_sample_data() typical function, rather class constructor instantiates new qsip_sample_data object. constructor takes data.frame input returns validated qsip_sample_data object. qSIP MISIP, \"sample\" post-fractionated material metadata pertaining fractionation process. Sample metadata contains information sample fractionation, sample ID, source material ID, gradient position, density, amount recovered (e.g. DNA concentration 16S copies), relative abundance fraction compared total. Ideally, gradient_pos_amt reported mass value DNA rather concentration. However, concentration reported, fraction_volume argument can used convert gradient_pos_amt concentration mass value. example, gradient_pos_amt reported ng/ul, fraction_volume reported 100 ul, gradient_pos_amt converted ng. Internally, qsip_sample_data renames metadata columns standardized MISIP terminology. data.frame standardized names can extracted back object using get_dataframe() method, optional original_headers argument can set TRUE return original column names. several validation checks done data.frame: data argument must contain data.frame, including tibble sample_id column must contain unique values per row gradient_position must container positive integers, -1 allowed designate sample \"bulk\" unfractionated","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":null,"dir":"Reference","previous_headings":"","what":"qSIP source data class — qsip_source_data","title":"qSIP source data class — qsip_source_data","text":"qsip_source_data object holds validated source material metadata.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qSIP source data class — qsip_source_data","text":"","code":"qsip_source_data(   data,   isotope = \"isotope\",   isotopolog = \"isotopolog\",   source_mat_id = \"source_mat_id\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qSIP source data class — qsip_source_data","text":"data (dataframe) Source metadata isotope (string) Isotope name isotopolog (string)  Isotopolog data source_mat_id (string) unique ID biological subject source","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"qSIP source data class — qsip_source_data","text":"validated qsip_source_data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/qsip_source_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"qSIP source data class — qsip_source_data","text":"qsip_source_data() typical function, rather class constructor instantiates new qsip_source_data object. constructor takes data.frame input returns validated qsip_source_data object. qSIP MISIP, \"source material\" original biological specimen DNA extracted . soil sample, plant, mouse, etc. pre-fractionated metadata, post-fractionation metadata goes qsip_sample_data object. Several validation checks run input data: data argument must data.frame, including tibble isotope, isotopolog, source_mat_id arguments must column names data.frame source_mat_id column must unique isotope column must contain valid isotope names. \"Valid\" means must one types qSIP2 package equations , namely 12C/13C, 14N/15N 16O/18O. Internally, qsip_source_data renames metadata columns standardized MISIP terminology. data.frame standardized names can extracted back object using get_dataframe() method, optional original_headers argument can set TRUE return original column names. One column metadata required although used qSIP2 isotopolog column. column required capture complete metadata compliant MISIP standards. However, running experiments multiple isotopologs column can used generate correct comparison groups using show_comparison_groups() function.","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove isotopolog_label from ","title":"Remove isotopolog_label from ","text":"convert data isotope isotopolog_label one isotope .","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove isotopolog_label from ","text":"","code":"remove_isotopolog_label(data)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove isotopolog_label from ","text":"data (dataframe) Sample metadata","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove isotopolog_label from ","text":"dataframe isotopolog_label column removed isotope column modified","code":""},{"path":[]},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove isotopolog label if needed — remove_isotopolog_label_check","title":"Remove isotopolog label if needed — remove_isotopolog_label_check","text":"Remove isotopolog label needed","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/remove_isotopolog_label_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove isotopolog label if needed — remove_isotopolog_label_check","text":"","code":"remove_isotopolog_label_check(df, isotope = \"isotope\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/resample_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed used in resampling — resample_seed","title":"Seed used in resampling — resample_seed","text":"Seed used resampling","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/resample_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed used in resampling — resample_seed","text":"","code":"resample_seed(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/resample_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed used in resampling — resample_seed","text":"qsip_data_object qSIP_data object run run_resampling()","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_EAF_calculations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate EAF values — run_EAF_calculations","title":"Calculate EAF values — run_EAF_calculations","text":"last main workhorse function qSIP analysis generates important values (Z, G, M, M_labeledmax, M_labeled EAF) observed data well resampled data.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_EAF_calculations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate EAF values — run_EAF_calculations","text":"","code":"run_EAF_calculations(qsip_data_object, gc_method = \"MM\")"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_EAF_calculations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate EAF values — run_EAF_calculations","text":"qsip_data_object (qsip_data) qsip_data_object resample information gc_method (string) method use calculating GC content WAD","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_EAF_calculations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate EAF values — run_EAF_calculations","text":"Returns updated qsip_data_object final EAF values @EAF slot.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter features in a qSIP data object — run_feature_filter","title":"Filter features in a qSIP data object — run_feature_filter","text":"Filters feature feature table qsip_data object presence minimum number fractions source_mat_ids.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter features in a qSIP data object — run_feature_filter","text":"","code":"run_feature_filter(   qsip_data_object,   unlabeled_source_mat_ids,   labeled_source_mat_ids,   min_unlabeled_sources = 2,   min_labeled_sources = 2,   min_unlabeled_fractions = 2,   min_labeled_fractions = 2,   quiet = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter features in a qSIP data object — run_feature_filter","text":"qsip_data_object (qsip_data) object qsip_data class unlabeled_source_mat_ids (string strings(s)) list unlabeled source_mat_ids filter labeled_source_mat_ids (string strings(s)) list labeled source_mat_ids filter min_unlabeled_sources (integer, default: 2) Minimum number unlabeled source_mat_ids feature must found . min_labeled_sources (integer, default: 2) Minimum number labeled source_mat_ids feature must found . min_unlabeled_fractions (integer, default: 2) Minimum number fractions feature must found present unlabeled source_mat_id min_labeled_fractions (integer, default: 2) Minimum number fractions feature must found present labeled source_mat_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter features in a qSIP data object — run_feature_filter","text":"updated qsip_data object filtered feature dataframe @filtered_feature_data slot intermediate data @filter_results slot plotting.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_feature_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter features in a qSIP data object — run_feature_filter","text":"Filtering first done fractions, source_mat_ids. example, take feature found three source_mat_ids 3, 5 9 fractions. set min_fractions = 5 min_sources = 3 feature survive filtering although found three source_mat_ids, one less minimum fraction count therefore considered found source_mat_id. feature table filtered retain feature_ids passing filter, keep sample_ids correspond given source_mat_ids. filtered table stored @filtered_feature_data slot, values table raw initial values relative abundances per fraction per tube. values originally calculated qsip_data object creation values features stored @tube_rel_abundance slot.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample WAD values — run_resampling","title":"Resample WAD values — run_resampling","text":"Takes filtered WAD dataframe resamples x times","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample WAD values — run_resampling","text":"","code":"run_resampling(   qsip_data_object,   resamples = 1000,   with_seed = NULL,   allow_failures = FALSE,   progress = TRUE,   quiet = FALSE )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample WAD values — run_resampling","text":"qsip_data_object (qsip_data) qsip data object filtered resamples (integer) number resamples/bootstraps run with_seed (integer) optional seed reproducibility allow_failures (boolean) Option allow resampling failures. TRUE, function continue resample even features fail. FALSE, function stop features fail. progress (boolean) Option show progress bar resampling step quiet (boolean) Option suppress messages","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample WAD values — run_resampling","text":"new qsip_data object @resamples slot populated resamples wad values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/run_resampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resample WAD values — run_resampling","text":"function returns list resampled dataframes x length labeled unlabeled sources.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_comparison_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Show comparison groups — show_comparison_groups","title":"Show comparison groups — show_comparison_groups","text":"Generates table ids grouped columns isotope, rows given treatments.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_comparison_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show comparison groups — show_comparison_groups","text":"","code":"show_comparison_groups(   source_data = NULL,   group = NULL,   isotope = \"isotope\",   source_mat_id = \"source_mat_id\" )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_comparison_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show comparison groups — show_comparison_groups","text":"source_data (dataframe, qsip_source_data qsip_data) Sample metadata group (string) Treatment value values isotope (string, default: isotope) Column name isotope data source_mat_id (string, default: source_mat_id) Column name source_mat_id","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_comparison_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show comparison groups — show_comparison_groups","text":"dataframe id grouped different group treatments isotopes","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_unshared_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Show missing source_mat_ids and sample_ids — show_unshared_ids","title":"Show missing source_mat_ids and sample_ids — show_unshared_ids","text":"function identifies missing source_mat_ids sample_ids source, sample, feature data objects.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_unshared_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show missing source_mat_ids and sample_ids — show_unshared_ids","text":"","code":"show_unshared_ids(qsip_data_object)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_unshared_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show missing source_mat_ids and sample_ids — show_unshared_ids","text":"qsip_data_object (qsip_data) qSIP data object","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/show_unshared_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show missing source_mat_ids and sample_ids — show_unshared_ids","text":"message unique IDs per category","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/source_results_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter features by source message formatting (internal) — source_results_message","title":"Filter features by source message formatting (internal) — source_results_message","text":"Filter features source message formatting (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/source_results_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter features by source message formatting (internal) — source_results_message","text":"","code":"source_results_message(by_source)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/source_results_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter features by source message formatting (internal) — source_results_message","text":"by_source by_source dataframe run_feature_filter","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the observed and resampled EAF values — summarize_EAF_values","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"Reports observed EAF value (observed_EAF) well mean resampled values (mean_resampled_EAF) lower upper confidence interval given confidence limit.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"","code":"summarize_EAF_values(qsip_data_object, confidence = 0.9, quiet = FALSE)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"qsip_data_object (qsip_data) qsip data object confidence (numeric, default: 0.9) confidence level confidence interval","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"dataframe summarized observed resampled EAF values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/summarize_EAF_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize the observed and resampled EAF values — summarize_EAF_values","text":"confidence interval uses resampling method returns quantile values resampled data. confidence = 0.9 (default) function returns 5% 95% quantiles (representing 90% resampling) lower upper results.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of a feature abundance table (internal) — validate_abundances","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"validation function internal function check validity feature abundance table.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"","code":"validate_abundances(data, feature_id, type)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"data (dataframe) ASV/OTU table feature_id (string) Column name feature IDs type (string) counts requires integers, coverage relative can take positive numeric","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"Returns NULL values valid, printed error","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_abundances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the validity of a feature abundance table (internal) — validate_abundances","text":"Rows contain unique taxa ids column designated id argument. column name unique sample name. Validity checking includes making sure data numeric (except feature IDs), numbers integers (type = \"counts\"), numbers negative.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_pos_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of density values (internal) — validate_gradient_pos_density","title":"Check the validity of density values (internal) — validate_gradient_pos_density","text":"Check validity density values (internal)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_pos_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of density values (internal) — validate_gradient_pos_density","text":"","code":"validate_gradient_pos_density(df, low = 1.55, high = 1.8)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_pos_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of density values (internal) — validate_gradient_pos_density","text":"df (dataframe) two-column dataframe density positions density values low (numeric, default: 1.55) low limit valid density values high (numeric, default: 1.8) high limit valid density values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_pos_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of density values (internal) — validate_gradient_pos_density","text":"Returns NULL density values valid, printed error","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of gradient position values (internal) — validate_gradient_position","title":"Check the validity of gradient position values (internal) — validate_gradient_position","text":"Valid gradient positions integers. value can -1 represent \"bulk\" non-qSIP samples.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of gradient position values (internal) — validate_gradient_position","text":"","code":"validate_gradient_position(gradient_position)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of gradient position values (internal) — validate_gradient_position","text":"gradient_position (string strings) Gradient position value values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_gradient_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of gradient position values (internal) — validate_gradient_position","text":"NULL gradient position values valid, printed error","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of an isotope string (internal) — validate_isotopes","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"Often \"bulk\" designation found column, can optionally removed validation checks","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"","code":"validate_isotopes(   isotope,   isotope_list = c(\"12C\", \"13C\", \"14N\", \"15N\", \"16O\", \"18O\"),   unfractionated_terms = c(\"bulk\", \"unfractionated\", \"T0\", \"time0\", \"Time0\") )"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"isotope (string(s)) Isotope value values isotope_list (strings, default: c(\"12C\", \"13C\", \"14N\", \"15N\", \"16O\", \"18O\")) Isotopes check unfractionated_terms (strings) Terms ignore checking isotope values","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"Returns NULL isotope strings valid, printed error","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_isotopes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check the validity of an isotope string (internal) — validate_isotopes","text":"isotope_list may change isotopolog_label stays thing. \"labeled\" isotopes allowed.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_source_isotope.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","title":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","text":"Currently used run_feature_filter() make sure user given labeled unlabeled source_mat_ids incorrect respective source_data.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_source_isotope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","text":"","code":"validate_source_isotope(qsip_data_object, source_mat_ids, isotope_list)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_source_isotope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the given source mat ids have the expected labeled/unlabeled designation (internal) — validate_source_isotope","text":"TRUE (match) FALSE (match)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_standard_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that a data.frame doesn't already contained standard column names (internal) — validate_standard_names","title":"Validate that a data.frame doesn't already contained standard column names (internal) — validate_standard_names","text":"Currently used instantiating one three \"primal\" objects. give error user tries pass non-standard column name, existing column name already uses standard name.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_standard_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that a data.frame doesn't already contained standard column names (internal) — validate_standard_names","text":"","code":"validate_standard_names(data, name, type)"},{"path":"https://jeffkimbrel.github.io/qSIP2/reference/validate_standard_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that a data.frame doesn't already contained standard column names (internal) — validate_standard_names","text":"data data.frame name column name selected user type type data (source, sample, feature)","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0125","dir":"Changelog","previous_headings":"","what":"qSIP2 0.12.5","title":"qSIP2 0.12.5","text":"Beginning work KBase functionality Added additional columns summarize_EAF_values() output updated vignettes plot_EAF_values() function added Added new parameter (gc_method) change GC calculation method run_EAF_calculations(). “MM” still default. Added ability add/remove zero_line plot_EAF_values()","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0115","dir":"Changelog","previous_headings":"","what":"qSIP2 0.11.5","title":"qSIP2 0.11.5","text":"Fixed run_resampling() get confused using sample names integers.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0114","dir":"Changelog","previous_headings":"","what":"qSIP2 0.11.4","title":"qSIP2 0.11.4","text":"Fixed example_source_df example_sample_df remove built validation errors (missing isotoplog source data, fractions characters sample data). dataframes now valid objects package","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0113","dir":"Changelog","previous_headings":"","what":"qSIP2 0.11.3","title":"qSIP2 0.11.3","text":"Added validation checks existing standard names dataframes. example, trying use data.frame source data already source_mat_id column, designate different column source_mat_id, throw error. prevent column name collisions potential unintended consequences. Added internal function validate_standard_names() check existing standard names dataframes.","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0112","dir":"Changelog","previous_headings":"","what":"qSIP2 0.11.2","title":"qSIP2 0.11.2","text":"Added alpha function plot_resampling_convergence() follow CoV resamplings converge stable value Added new vignette(\"resampling\") details resampling procedure","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0111","dir":"Changelog","previous_headings":"","what":"qSIP2 0.11.1","title":"qSIP2 0.11.1","text":"Fixed run_EAF_calculations() work allow_failures logic Add plot_feature_resamplings() plot resampling results single list feature_ids","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0110","dir":"Changelog","previous_headings":"","what":"qSIP2 0.11.0","title":"qSIP2 0.11.0","text":"Introduced ability keep successful resampling attempts, discard failures. keeps run_resampling() failing sample count low, result feature_ids less expected number resamples. controlled allow_failures argument run_resampling(). Two functions added inspect results resampling: get_resample_counts() plot_successful_resamples().","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0106","dir":"Changelog","previous_headings":"","what":"qSIP2 0.10.6","title":"qSIP2 0.10.6","text":"Added infer_source_data() function infer source data sample data data frame Update documentation internal functions Fixed validate_gradient_pos_density() (tests) fail bulk data gradient_position -1 (#8). Fixed validate_isotopes() accept standard unfractionated terms like “bulk” “time0” bypass isotope validation. plot_sample_curves() plot_source_wads() updated ignore unfractionated samples/sources Removed requirement gradient_pos_rel_amt column imported sample dataframe. one can still pass column name. don’t, run add_gradient_pos_rel_amt() silently using gradient_pos_amt column, provide message . Updated vignette(\"feature_data\") Documentation get_dataframe()","code":""},{"path":"https://jeffkimbrel.github.io/qSIP2/news/index.html","id":"qsip2-0105","dir":"Changelog","previous_headings":"","what":"qSIP2 0.10.5","title":"qSIP2 0.10.5","text":"Started NEWS.md file keep track changes Updated plot_sample_curves() plot_source_wads() use existing WAD values pre-calculated making qsip_data object. means now require qsip_data object input longer accept sample source object. main workflow vignette updated reflect changes. Renamed data() get_dataframe() match naming scheme functions.","code":""}]
